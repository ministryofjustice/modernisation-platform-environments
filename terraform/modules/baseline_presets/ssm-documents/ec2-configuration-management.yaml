---
schemaVersion: "2.2"
description: SSM Document for updating configuration management on server using ansible for linux servers, and powershell for windows servers
parameters:
  branch:
    type: String
    description: Which branch of modernisation-platform-configuration-management to use
    default: main
  ansibleArgs:
    type: String
    description: Any additional parameters to pass to ansible
    default: site.yml --tags ec2patch
  powershellScript:
    type: String
    description: Powershell script to invoke from config management repo powershell/Scripts directory
    default: Invoke-UserDataScript.ps1
  powershellScriptArgs:
    type: String
    description: 'Any additional parameters to pass to powershell in hashtable format, e.g. @{"DomainNameFQDN" = "azure.noms.root"}'
    default: '@{}'
mainSteps:
  - name: LinuxAnsibleConfigurationManagement
    action: aws:runShellScript
    precondition:
      StringEquals:
        - platformType
        - Linux
    inputs:
      runCommand:
        - |
          run_ansible() {
            tmpdir=/root/.ec2-configuration-management
            branch="{{ branch }}"
            ansibleArgs="{{ ansibleArgs }}"
            sudo /bin/rm -rf $tmpdir 2>/dev/null || true
            sudo mkdir $tmpdir 2>/dev/null || true
            sudo curl "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-configuration-management/$branch/ansible/roles/ansible-script/files/ansible.sh" -o $tmpdir/ansible.sh
            sudo chmod +x $tmpdir/ansible.sh
            sudo ansible_dir=$tmpdir branch=$branch $tmpdir/ansible.sh $ansibleArgs
          }
          run_ansible | logger -s -p local3.info -t ec2-configuration-management-ansible 2>&1
  - name: WindowsPowershellConfigurationManagement
    action: aws:runPowerShellScript
    precondition:
      StringEquals:
        - platformType
        - Windows
    inputs:
      runCommand:
        - |
          # Run UserData powershell from modernisation-platform-configuration-management repo
          $ErrorActionPreference = "Stop"
          Write-Output "Downloading and running Run-GitScript.ps1"
          Set-Location -Path ([System.IO.Path]::GetTempPath())
          $GitBranch = "{{ branch }}"
          $Script = "{{ powershellScript }}"
          $ScriptArgs = {{ powershellScriptArgs }}
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 # since powershell 4 uses Tls1 as default
          Invoke-WebRequest "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-configuration-management/${GitBranch}/powershell/Scripts/Run-GitScript.ps1" -OutFile "Run-GitScript.ps1"
          . ./Run-GitScript.ps1 $Script -GitBranch $GitBranch -ScriptArgs $ScriptArgs
          Exit $LASTEXITCODE
