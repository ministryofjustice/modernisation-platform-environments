# This is an EC2Launch V2 type user-data script
# https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-settings.html#ec2launch-v2-task-configuration
# See C:\ProgramData\Amazon\EC2Launch\log for logs
version: 1.0 # version 1.0 is required as this executes AFTER the SSM Agent is running
tasks:
  - task: executeScript
    inputs:
      - frequency: always
        type: powershell
        runAs: admin
        content: |-
          # Install AWS PowerShell module if not already installed
          if (-Not (Get-Module -ListAvailable -Name "AWSPowerShell")) {
            Install-Package -Name "AWSPowerShell" -Force -SkipPublisherCheck
          }

          Function Get-SSMAgentStatus {
            $service = Get-Service -Name "AmazonSSMAgent"
            if ($service.Status -eq "Running") {
                return $true
            } else {
                Start-Service -Name "AmazonSSMAgent" -Force
            }
          }

          Function Invoke-SSMDocument {
            param(
              [Parameter(Mandatory = $true)]
              [PSCustomObject]]$SSMDocumentObject
            )

            $DocumentName = $SSMDocumentObject.PSObject.Properties.Name
            $Parameters = $SSMDocumentObject.$DocumentName

            $instanceId = Get-EC2InstanceMetadata -Category InstanceId

            $commandId = Send-SSMCommand -InstanceId $instanceId -DocumentName $DocumentName -Parameters $Parameters -Force
            Write-Host "Executed SSM command with Command ID: $($commandId.CommandId)"
          }

          $startTime = Get-Date

          $ssmDocuments = @(
            [PSCustomObject]@{
              "windows-psreadline-fix" = @{}
            }
          )

          # EXAMPLE SSMDOCUMENTS list
          # $ssmDocuments = @(
          # [PSCustomObject]@{
          #   "windows-psreadline-fix" = @{}
          # },
          # [PSCustomObject]@{
          #   "another-ssm-doc" = @{
          #     # Add your parameters here. Example:
          #     # Param1 = "Value1"
          #     # Param2 = "Value2"
          #   }
          # }            
          #) 

          # Main loop to wait for SSM Agent to be running & run multiple ssm docs with parameters
          do {
            if (Get-SSMAgentStatus) {
              Add-Content -Path "C:\Temp\user_data_status.txt" -Value "SSM Agent is running, executing SSM command. $(Get-Date)"

              foreach ($ssmDocument in $ssmDocuments) {
                Add-Content -Path "C:\Temp\user_data_status.txt" - Value "SSM Document $ssmDocument run has started. $(Get-Date)"
                Invoke-SSMDocument -DocumentName "$ssmDocument
              }
              break
            } else {
              Add-Content -Path "C:\Temp\user_data_status.txt" -Value "SSM Agent is not running yet. $(Get-Date) Waiting..."
              Start-Sleep -Seconds 10
            }
          } while ((Get-Date) -lt $startTime.AddMinutes(10))

