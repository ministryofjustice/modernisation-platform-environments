---
schemaVersion: "2.2"
description: "SSM Document for joining Windows EC2 instances to the domain. The instance will be RESTARTED so this is not applicable for ASG's."
parameters:
  domainJoinUsername:
    type: "String"
    description: "username with domain join permissions"
  domainJoinPassword:
    type: "String"
    description: "password for domain join user"
  hostname:
    type: "String"
    description: "hostname for the new instance, must not be longer than 15 characters"
    maxChars: 15
  domain:
    type: "String"
    description: "domain to join, either Prod or Dev"
    allowedValues:
     - Prod
     - Dev
mainSteps:
  - name: WindowsDomainJoin
    action: aws:runPowerShellScript
    precondition:
      StringEquals:
        - platformType
        - Windows
    inputs:
      runCommand:
        - |
          $ErrorActionPreference = "Stop" # all errors will terminate the script

          $domainJoinUsername = "{{domainJoinUsername}}"
          $domainJoinPassword = "{{domainJoinPassword}}"
          $hostname = "{{hostname}}"
          $domain = "{{domain}}"

          # Install AWS PowerShell module if not already installed
          if (-Not (Get-Module -ListAvailable -Name "AWSPowerShell")) {
            Install-Package -Name "AWSPowerShell" -Force -SkipPublisherCheck
          }

          # Set up DNS IP addresses and suffixes
          if ($domain -contains "dev") {
            Write-Host "Setting DNS Client Server and DNS Client Global Settings for Dev domain"
            Set-DnsClientServerAddress -InterfaceAlias "Ethernet" -ServerAddresses ("10.102.0.196","10.102.0.200")
            Set-DnsClientGlobalSetting -SuffixSearchList "azure.noms.root"
          } elseif ($domain -contains "prod") {
            Write-Host "Setting DNS Client Server and DNS Client Global Settings for Prod domain"
            Set-DnsClientServerAddress -InterfaceAlias "Ethernet" -ServerAddresses ("10.40.128.196","10.40.0.133")
            Set-DnsClientGlobalSetting -SuffixSearchList "azure.hmpp.root"
          } else {
            Write-Error "Domain must be either Prod or Dev"
            exit 1
          }

          function Set-UsernameString {
            param (
              [Parameter(Mandatory=$true)]
              [string]$domainJoinUsername
              [Parameter(Mandatory=$true)]
              [string]$domain
            )
            if ($domain -contains "prod") {
              return "hmpp\$domainJoinUsername"
            } elseif ($domain -contains "dev") {
              return "azure\$domainJoinUsername"
            } else {
              Write-Error "Domain must be either Prod or Dev"
              exit 1
            }
          }

          function Set-DomainString {
            param (
              [Parameter(Mandatory=$true)]
              [string]$domain
            )
            if ($domain -contains "prod") {
              return "azure.hmpp.root"
            } elseif ($domain -contains "dev") {
              return "azure.noms.root"
            } else {
              Write-Error "Domain must be either Prod or Dev"
              exit 1
            }
          }

          function Check-HostnameInUse {
            param (
              [Parameter(Mandatory=$true)]
              [string]$hostname
            )
            $hostnameInUse = Get-ADComputer -Filter {Name -eq $hostname}
            if ($hostnameInUse) {
              return $true
            } else {
              return $false
            }
          }

          $secpasswd = ConvertTo-SecureString $domainJoinPassword -AsPlainText -Force
          $credentials = New-Object System.Management.Automation.PSCredential ((Set-UsernameString -domainJoinUsername $domainJoinUsername -domain $domain), $secpasswd)

          if (Check-HostnameInUse -hostname $hostname) {
            Write-Error "Hostname $hostname is already in use"
            exit 1         
          } else {
            Write-Host "Hostname $hostname is not in use, continuing"
            Write-Host "Adding instance as $hostname to (Set-DomainString -domain $domain)"
            Write-Host "WARNING: Instance will restart to complete domain join"
            Add-Computer -DomainName (Set-DomainString -domain $domain) -Credential $credentials -NewName $hostname -Restart -Verbose
          }

          # TODO: check if the instance is part of an ASG and terminate if it is since reboot may just result in another instance being spawned which won't be joined to the domain
          # Get-EC2Instance ID then find out whether it's in an asg? 

