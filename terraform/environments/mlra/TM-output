data.terraform_remote_state.core_network_services: Reading...
data.http.environments_file: Reading...
data.http.environments_file: Read complete after 0s [id=https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/mlra.json]
module.alb.module.lb-access-logs-enabled.data.aws_elb_service_account.default: Reading...
module.ec2_instance.data.aws_ssm_parameter.this[0]: Reading...
data.aws_caller_identity.current: Reading...
data.aws_region.current: Reading...
data.aws_ssm_parameter.modernisation_platform_account_id: Reading...
module.alb.module.lb-access-logs-enabled.data.aws_elb_service_account.default: Read complete after 0s [id=652711504416]
data.aws_region.current: Read complete after 0s [id=eu-west-2]
data.aws_ssm_parameter.db_password: Reading...
module.ec2_instance.data.aws_partition.current: Reading...
data.aws_vpc.shared: Reading...
module.ec2_instance.data.aws_partition.current: Read complete after 0s [id=aws]
module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].data.aws_caller_identity.current: Reading...
data.aws_organizations_organization.root_account: Reading...
module.alb.module.lb-access-logs-enabled.data.aws_vpc.shared: Reading...
data.aws_caller_identity.oidc_session: Reading...
data.aws_ssm_parameter.db_password: Read complete after 0s [id=APP_MAATDB_DBPASSWORD_MLA1]
module.ec2_instance.data.aws_ssm_parameter.this[0]: Read complete after 0s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]
data.aws_ssm_parameter.modernisation_platform_account_id: Read complete after 0s [id=modernisation_platform_account_id]
data.aws_caller_identity.current: Read complete after 1s [id=965215663362]
module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].data.aws_caller_identity.current: Read complete after 1s [id=965215663362]
data.aws_vpc.shared: Read complete after 1s [id=vpc-03b493ca0dc364b78]
data.aws_subnets.private-public: Reading...
data.aws_subnet.private_subnets_a: Reading...
data.aws_subnet.public_subnets_b: Reading...
data.aws_subnet.private_subnets_b: Reading...
data.aws_subnets.shared-public: Reading...
data.terraform_remote_state.core_network_services: Read complete after 1s
data.aws_subnet.public_subnets_c: Reading...
data.aws_organizations_organization.root_account: Read complete after 1s [id=o-b2fpbzyd95]
data.aws_subnet.private_subnets_c: Reading...
module.alb.module.lb-access-logs-enabled.data.aws_vpc.shared: Read complete after 1s [id=vpc-03b493ca0dc364b78]
data.aws_subnet.data_subnets_b: Reading...
data.aws_caller_identity.oidc_session: Read complete after 1s [id=965215663362]
data.aws_subnet.private_subnets_a: Read complete after 0s [id=subnet-082f917f7abd1cd68]
data.aws_subnets.private-public: Read complete after 0s [id=eu-west-2]
data.aws_subnet.public_subnets_a: Reading...
data.aws_subnet.data_subnets_c: Reading...
data.aws_subnet.data_subnets_a: Reading...
data.aws_subnet.public_subnets_b: Read complete after 0s [id=subnet-060a6255cef766e59]
data.aws_subnets.shared-data: Reading...
data.aws_subnets.shared-public: Read complete after 0s [id=eu-west-2]
data.aws_subnet.private_subnets_b: Read complete after 0s [id=subnet-0371ca83732b46069]
data.aws_subnet.public_subnets_c: Read complete after 0s [id=subnet-07ae68864214787e5]
data.aws_subnet.private_subnets_c: Read complete after 1s [id=subnet-0a4201071ad58163d]
data.aws_subnet.data_subnets_b: Read complete after 1s [id=subnet-0641fc32b6c3ac0db]
data.aws_subnet.public_subnets_a: Read complete after 1s [id=subnet-09c80fd5675403724]
data.aws_subnet.data_subnets_a: Read complete after 1s [id=subnet-0d9f747f435f2149a]
data.aws_subnet.data_subnets_c: Read complete after 1s [id=subnet-061712d877acd16b1]
data.aws_subnets.shared-data: Read complete after 1s [id=eu-west-2]
data.aws_secretsmanager_secret.pagerduty_integration_keys: Reading...
data.aws_secretsmanager_secret.environment_management: Reading...
data.aws_caller_identity.modernisation_platform: Reading...
data.aws_secretsmanager_secret.pagerduty_integration_keys: Read complete after 0s [id=arn:aws:secretsmanager:eu-west-2:946070829339:secret:pagerduty_integration_keys-26WzqG]
data.aws_secretsmanager_secret_version.pagerduty_integration_keys: Reading...
data.aws_secretsmanager_secret.environment_management: Read complete after 0s [id=arn:aws:secretsmanager:eu-west-2:946070829339:secret:environment_management-BLRCDb]
data.aws_secretsmanager_secret_version.environment_management: Reading...
data.aws_secretsmanager_secret_version.pagerduty_integration_keys: Read complete after 0s [id=arn:aws:secretsmanager:eu-west-2:946070829339:secret:pagerduty_integration_keys-26WzqG|AWSCURRENT]
data.aws_secretsmanager_secret_version.environment_management: Read complete after 0s [id=arn:aws:secretsmanager:eu-west-2:946070829339:secret:environment_management-BLRCDb|AWSCURRENT]
data.aws_caller_identity.modernisation_platform: Read complete after 1s [id=946070829339]
data.aws_kms_key.general_shared: Reading...
data.aws_kms_key.rds_shared: Reading...
data.aws_kms_key.ebs_shared: Reading...
data.aws_kms_key.ebs_shared: Read complete after 0s [id=3a3dc579-aa73-4544-a7e6-0a0d198dafb9]
data.aws_kms_key.rds_shared: Read complete after 0s [id=c691594f-a57d-47d0-846f-b25d19f773b6]
data.aws_kms_key.general_shared: Read complete after 0s [id=9645837e-1b3b-4ec6-bafd-7ba08b203798]
data.aws_route53_zone.inner: Reading...
data.aws_route53_zone.external: Reading...
data.aws_route53_zone.network-services: Reading...
data.aws_route53_zone.network-services: Read complete after 0s [id=Z00379322STHYMCQ5Z45Y]
data.aws_route53_zone.external: Read complete after 2s [id=Z0321080TDDRIM16INGC]
data.aws_route53_zone.inner: Read complete after 2s [id=Z04758902B6AUDT6ND6UZ]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_cloudwatch_log_group.ecs_log_group will be created
  + resource "aws_cloudwatch_log_group" "ecs_log_group" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "mlra-ecs-log-group"
      + name_prefix       = (known after apply)
      + retention_in_days = 0
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # aws_iam_instance_profile.instance_profile will be created
  + resource "aws_iam_instance_profile" "instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "SsmManagedInstanceProfile"
      + path        = "/"
      + role        = "SsmManagedInstance"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # aws_iam_role.ssm_managed_instance will be created
  + resource "aws_iam_role" "ssm_managed_instance" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = [
          + "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        ]
      + max_session_duration  = 3600
      + name                  = "SsmManagedInstance"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_lb.ingress-network-lb will be created
  + resource "aws_lb" "ingress-network-lb" {
      + arn                              = (known after apply)
      + arn_suffix                       = (known after apply)
      + dns_name                         = (known after apply)
      + enable_cross_zone_load_balancing = false
      + enable_deletion_protection       = true
      + id                               = (known after apply)
      + internal                         = true
      + ip_address_type                  = (known after apply)
      + load_balancer_type               = "network"
      + name                             = "ingress-network-lb"
      + security_groups                  = (known after apply)
      + subnets                          = [
          + "subnet-0371ca83732b46069",
          + "subnet-082f917f7abd1cd68",
          + "subnet-0a4201071ad58163d",
        ]
      + tags                             = {
          + "Name" = "mlra-test-ingress-network-lb"
        }
      + tags_all                         = {
          + "Name" = "mlra-test-ingress-network-lb"
        }
      + vpc_id                           = (known after apply)
      + zone_id                          = (known after apply)

      + subnet_mapping {
          + allocation_id        = (known after apply)
          + ipv6_address         = (known after apply)
          + outpost_id           = (known after apply)
          + private_ipv4_address = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # aws_lb_listener.lz-ingress will be created
  + resource "aws_lb_listener" "lz-ingress" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "TCP"
      + ssl_policy        = (known after apply)
      + tags              = {
          + "Name" = "mlra-test-lz-ingress"
        }
      + tags_all          = {
          + "Name" = "mlra-test-lz-ingress"
        }

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.alb-target will be created
  + resource "aws_lb_target_group" "alb-target" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "alb-target"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "TCP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "mlra-test-alb-target"
        }
      + tags_all                           = {
          + "Name" = "mlra-test-alb-target"
        }
      + target_type                        = "alb"
      + vpc_id                             = "vpc-03b493ca0dc364b78"

      + health_check {
          + enabled             = (known after apply)
          + healthy_threshold   = (known after apply)
          + interval            = (known after apply)
          + matcher             = (known after apply)
          + path                = (known after apply)
          + port                = (known after apply)
          + protocol            = (known after apply)
          + timeout             = (known after apply)
          + unhealthy_threshold = (known after apply)
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }

      + target_failover {
          + on_deregistration = (known after apply)
          + on_unhealthy      = (known after apply)
        }
    }

  # aws_lb_target_group_attachment.alb-target-attachment will be created
  + resource "aws_lb_target_group_attachment" "alb-target-attachment" {
      + id               = (known after apply)
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.alb.aws_lb_listener.alb_listener will be created
  + resource "aws_lb_listener" "alb_listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.alb.aws_lb_listener_rule.alb_listener_rule will be created
  + resource "aws_lb_listener_rule" "alb_listener_rule" {
      + arn          = (known after apply)
      + id           = (known after apply)
      + listener_arn = (known after apply)
      + priority     = (known after apply)
      + tags_all     = (known after apply)

      + action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + condition {

          + path_pattern {
              + values = [
                  + "/",
                ]
            }
        }
    }

  # module.alb.aws_lb_target_group.alb_target_group will be created
  + resource "aws_lb_target_group" "alb_target_group" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "30"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "mlra-tg-test"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "mlra-tg-test"
        }
      + tags_all                           = {
          + "Name" = "mlra-tg-test"
        }
      + target_type                        = "instance"
      + vpc_id                             = "vpc-03b493ca0dc364b78"

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 15
          + matcher             = (known after apply)
          + path                = "/mlra/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness {
          + cookie_duration = 10800
          + enabled         = true
          + type            = "lb_cookie"
        }

      + target_failover {
          + on_deregistration = (known after apply)
          + on_unhealthy      = (known after apply)
        }
    }

  # module.cwalarm.aws_cloudwatch_dashboard.mlradash will be created
  + resource "aws_cloudwatch_dashboard" "mlradash" {
      + dashboard_arn  = (known after apply)
      + dashboard_body = (known after apply)
      + dashboard_name = "MLRA"
      + id             = (known after apply)
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.applicationelb4xxerror will be created
  + resource "aws_cloudwatch_metric_alarm" "applicationelb4xxerror" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This alarm will trigger if we receive 4 4XX elb alerts in a 5 minute period."
      + alarm_name                            = "mlra-test-elb-4xx-error-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_ELB_4XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.applicationelb5xxerror will be created
  + resource "aws_cloudwatch_metric_alarm" "applicationelb5xxerror" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This alarm will trigger if we receive 4 5XX elb alerts in a 5 minute period."
      + alarm_name                            = "mlra-test-elb-5xx-error-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_ELB_5XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.cpuoverthreshold will be created
  + resource "aws_cloudwatch_metric_alarm" "cpuoverthreshold" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = <<-EOT
            If the CPU exceeds the predefined threshold, this alarm will trigger. 
             Please investigate.
        EOT
      + alarm_name                            = "mlra-test-CPU-high-threshold-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "mlra-cluster-scaling-group"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/EC2"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 85
      + treat_missing_data                    = "breaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.ecsmemoryoverthreshold will be created
  + resource "aws_cloudwatch_metric_alarm" "ecsmemoryoverthreshold" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = <<-EOT
            If the memory util exceeds the predefined threshold, this alarm will trigger.
             Please investigate.
        EOT
      + alarm_name                            = "mlra-test-ECS-Memory-Over-Threshold"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "ClusterName" = "mlra"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "MemoryUtilization"
      + namespace                             = "AWS/ECS"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 75
      + treat_missing_data                    = "breaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.esccpuoverthreshold will be created
  + resource "aws_cloudwatch_metric_alarm" "esccpuoverthreshold" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = <<-EOT
            If the CPU exceeds the predefined threshold, this alarm will trigger. 
             Please investigate.
        EOT
      + alarm_name                            = "mlra-test-ECS-CPU-high-threshold-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "ClusterName" = "mlra"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "CPUUtilization"
      + namespace                             = "AWS/ECS"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 75
      + treat_missing_data                    = "breaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.http4xxerror will be created
  + resource "aws_cloudwatch_metric_alarm" "http4xxerror" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This alarm will trigger if we receive 4 4XX http alerts in a 5 minute period."
      + alarm_name                            = "mlra-test-http-4xx-error-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_Target_4XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.http5xxerror will be created
  + resource "aws_cloudwatch_metric_alarm" "http5xxerror" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "This alarm will trigger if we receive 4 5XX http alerts in a 5 minute period."
      + alarm_name                            = "mlra-test-http-5xx-error-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "HTTPCode_Target_5XX_Count"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.rejectedconnectioncount will be created
  + resource "aws_cloudwatch_metric_alarm" "rejectedconnectioncount" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "There is no surge queue on ALB's. Alert triggers in ALB rejects too many requests, usually due to backend being busy."
      + alarm_name                            = "mlra-test-RejectedConnectionCount-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "RejectedConnectionCount"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Sum"
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.statuscheckfailure will be created
  + resource "aws_cloudwatch_metric_alarm" "statuscheckfailure" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "If a status check failure occurs on an instance, please investigate. http=//docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html"
      + alarm_name                            = "mlra-test-status-check-failure-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = {
          + "AutoScalingGroupName" = "mlra-cluster-scaling-group"
        }
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "StatusCheckFailed"
      + namespace                             = "AWS/EC2"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 1
      + treat_missing_data                    = "breaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.targetResponsetimemaximum will be created
  + resource "aws_cloudwatch_metric_alarm" "targetResponsetimemaximum" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received. Triggered if response is longer than 60s."
      + alarm_name                            = "mlra-test-alb-target-response-time-alarm-maximum"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 1
      + id                                    = (known after apply)
      + metric_name                           = "TargetResponseTime"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Maximum"
      + tags_all                              = (known after apply)
      + threshold                             = 60
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.targetresponsetime will be created
  + resource "aws_cloudwatch_metric_alarm" "targetresponsetime" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "The time elapsed, in seconds, after the request leaves the load balancer until a response from the target is received"
      + alarm_name                            = "mlra-test-alb-target-response-time-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + extended_statistic                    = "p99"
      + id                                    = (known after apply)
      + metric_name                           = "TargetResponseTime"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + tags_all                              = (known after apply)
      + threshold                             = 10
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_cloudwatch_metric_alarm.unhealthyhosts will be created
  + resource "aws_cloudwatch_metric_alarm" "unhealthyhosts" {
      + actions_enabled                       = true
      + alarm_actions                         = (known after apply)
      + alarm_description                     = "The unhealthy hosts alarm triggers if your load balancer recognises there is an unhealthy host and has been there for over 15 minutes."
      + alarm_name                            = "mlra-test-unhealthy-hosts-alarm"
      + arn                                   = (known after apply)
      + comparison_operator                   = "GreaterThanThreshold"
      + dimensions                            = (known after apply)
      + evaluate_low_sample_count_percentiles = (known after apply)
      + evaluation_periods                    = 5
      + id                                    = (known after apply)
      + metric_name                           = "UnHealthyHostCount"
      + namespace                             = "AWS/ApplicationELB"
      + ok_actions                            = (known after apply)
      + period                                = 60
      + statistic                             = "Average"
      + tags_all                              = (known after apply)
      + threshold                             = 0
      + treat_missing_data                    = "notBreaching"
    }

  # module.cwalarm.aws_sns_topic.mlra_alerting_topic will be created
  + resource "aws_sns_topic" "mlra_alerting_topic" {
      + arn                         = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + name                        = "mlra-test-alerting-topic"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + tags_all                    = (known after apply)
    }

  # module.ec2_instance.aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = (sensitive)
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3a.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = "subnet-06594eda5221bd3c9"
      + tags                                 = {
          + "Environment" = "test"
          + "Name"        = "test-landingzone-httptest"
        }
      + tags_all                             = {
          + "Environment" = "test"
          + "Name"        = "test-landingzone-httptest"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = "IyEvYmluL2Jhc2gKeXVtIGluc3RhbGwgLXkgaHR0cGQKc3lzdGVtY3RsIHN0YXJ0IGh0dHBkCg=="
      + user_data_replace_on_change          = false
      + volume_tags                          = {
          + "Name" = "test-landingzone-httptest"
        }
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + timeouts {}
    }

  # module.httptest_sg.aws_security_group.this_name_prefix[0] will be created
  + resource "aws_security_group" "this_name_prefix" {
      + arn                    = (known after apply)
      + description            = "Security group for TG connectivity testing between LAA LZ & MP"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = (known after apply)
      + name_prefix            = "landingzone-httptest-sg-"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "landingzone-httptest-sg"
        }
      + tags_all               = {
          + "Name" = "landingzone-httptest-sg"
        }
      + vpc_id                 = "vpc-03b493ca0dc364b78"

      + timeouts {
          + create = "10m"
          + delete = "15m"
        }
    }

  # module.httptest_sg.aws_security_group_rule.egress_with_cidr_blocks[0] will be created
  + resource "aws_security_group_rule" "egress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + description              = "Outgoing"
      + from_port                = 0
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.httptest_sg.aws_security_group_rule.ingress_with_cidr_blocks[0] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "10.200.0.0/20",
        ]
      + description              = "HTTP"
      + from_port                = 80
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.httptest_sg.aws_security_group_rule.ingress_with_cidr_blocks[1] will be created
  + resource "aws_security_group_rule" "ingress_with_cidr_blocks" {
      + cidr_blocks              = [
          + "10.203.0.0/20",
        ]
      + description              = "HTTP"
      + from_port                = 80
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.httptest_sg.aws_security_group_rule.ingress_with_source_security_group_id[0] will be created
  + resource "aws_security_group_rule" "ingress_with_source_security_group_id" {
      + description              = "HTTPS For SSM Session Manager"
      + from_port                = 443
      + id                       = (known after apply)
      + prefix_list_ids          = []
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = "sg-0a8e105b2345a1840"
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.mlra-ecs.data.aws_ecs_task_definition.task_definition will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_ecs_task_definition" "task_definition" {
      + arn             = (known after apply)
      + family          = (known after apply)
      + id              = (known after apply)
      + network_mode    = (known after apply)
      + revision        = (known after apply)
      + status          = (known after apply)
      + task_definition = "mlra-task-definition"
      + task_role_arn   = (known after apply)
    }

  # module.mlra-ecs.data.aws_iam_policy_document.ecs_task_execution_role will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_iam_policy_document" "ecs_task_execution_role" {
      + id      = (known after apply)
      + json    = (known after apply)
      + version = "2012-10-17"

      + statement {
          + actions = [
              + "sts:AssumeRole",
            ]
          + effect  = "Allow"

          + principals {
              + identifiers = [
                  + "ecs-tasks.amazonaws.com",
                ]
              + type        = "Service"
            }
        }
    }

  # module.mlra-ecs.data.aws_lb_target_group.target_group will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_lb_target_group" "target_group" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = (known after apply)
      + health_check                       = (known after apply)
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "mlra-tg-test"
      + port                               = (known after apply)
      + preserve_client_ip                 = (known after apply)
      + protocol                           = (known after apply)
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = (known after apply)
      + slow_start                         = (known after apply)
      + stickiness                         = (known after apply)
      + tags                               = (known after apply)
      + target_type                        = (known after apply)
      + vpc_id                             = (known after apply)

      + timeouts {
          + read = (known after apply)
        }
    }

  # module.mlra-ecs.data.aws_subnets.shared-private will be read during apply
  # (config refers to values not yet known)
 <= data "aws_subnets" "shared-private" {
      + id   = (known after apply)
      + ids  = (known after apply)
      + tags = {
          + "Name" = "laa-test-general-private*"
        }

      + filter {
          + name   = "vpc-id"
          + values = [
              + (known after apply),
            ]
        }

      + timeouts {
          + read = (known after apply)
        }
    }

  # module.mlra-ecs.data.aws_vpc.shared will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_vpc" "shared" {
      + arn                                  = (known after apply)
      + cidr_block                           = (known after apply)
      + cidr_block_associations              = (known after apply)
      + default                              = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = (known after apply)
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = (known after apply)
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + state                                = (known after apply)
      + tags                                 = {
          + "Name" = "laa-test"
        }

      + timeouts {
          + read = (known after apply)
        }
    }

  # module.mlra-ecs.aws_appautoscaling_policy.ecs_target_cpu will be created
  + resource "aws_appautoscaling_policy" "ecs_target_cpu" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "application-scaling-policy-cpu"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/mlra/mlra-ecs-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 80

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageCPUUtilization"
            }
        }
    }

  # module.mlra-ecs.aws_appautoscaling_policy.ecs_target_memory will be created
  + resource "aws_appautoscaling_policy" "ecs_target_memory" {
      + alarm_arns         = (known after apply)
      + arn                = (known after apply)
      + id                 = (known after apply)
      + name               = "application-scaling-policy-memory"
      + policy_type        = "TargetTrackingScaling"
      + resource_id        = "service/mlra/mlra-ecs-service"
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"

      + target_tracking_scaling_policy_configuration {
          + disable_scale_in = false
          + target_value     = 80

          + predefined_metric_specification {
              + predefined_metric_type = "ECSServiceAverageMemoryUtilization"
            }
        }
    }

  # module.mlra-ecs.aws_appautoscaling_target.ecs_target will be created
  + resource "aws_appautoscaling_target" "ecs_target" {
      + id                 = (known after apply)
      + max_capacity       = 6
      + min_capacity       = 2
      + resource_id        = "service/mlra/mlra-ecs-service"
      + role_arn           = (known after apply)
      + scalable_dimension = "ecs:service:DesiredCount"
      + service_namespace  = "ecs"
    }

  # module.mlra-ecs.aws_autoscaling_group.cluster-scaling-group will be created
  + resource "aws_autoscaling_group" "cluster-scaling-group" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = (known after apply)
      + id                        = (known after apply)
      + max_size                  = 6
      + metrics_granularity       = "1Minute"
      + min_size                  = 2
      + name                      = (known after apply)
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "10m"

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "mlra-cluster-scaling-group"
        }
      + tag {
          + key                 = "application"
          + propagate_at_launch = true
          + value               = "mlra"
        }
      + tag {
          + key                 = "business-unit"
          + propagate_at_launch = true
          + value               = "LAA"
        }
      + tag {
          + key                 = "environment-name"
          + propagate_at_launch = true
          + value               = "mlra-test"
        }
      + tag {
          + key                 = "infrastructure-support"
          + propagate_at_launch = true
          + value               = "modernisation-platform@digital.justice.gov.uk"
        }
      + tag {
          + key                 = "is-production"
          + propagate_at_launch = true
          + value               = "false"
        }
      + tag {
          + key                 = "owner"
          + propagate_at_launch = true
          + value               = "laa-crime-apps@digital.justice.gov.uk"
        }
      + tag {
          + key                 = "source-code"
          + propagate_at_launch = true
          + value               = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
    }

  # module.mlra-ecs.aws_cloudwatch_log_group.cloudwatch_group will be created
  + resource "aws_cloudwatch_log_group" "cloudwatch_group" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "mlra-ecs"
      + name_prefix       = (known after apply)
      + retention_in_days = 30
      + skip_destroy      = false
      + tags              = {
          + "Name"                   = "mlra-ecs-cloudwatch-group"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all          = {
          + "Name"                   = "mlra-ecs-cloudwatch-group"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
    }

  # module.mlra-ecs.aws_cloudwatch_log_stream.cloudwatch_stream will be created
  + resource "aws_cloudwatch_log_stream" "cloudwatch_stream" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + log_group_name = "mlra-ecs"
      + name           = "mlra-log-stream"
    }

  # module.mlra-ecs.aws_ecs_capacity_provider.capacity_provider will be created
  + resource "aws_ecs_capacity_provider" "capacity_provider" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "mlra-capacity-provider"
      + tags     = {
          + "Name"                   = "mlra-capacity-provider"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all = {
          + "Name"                   = "mlra-capacity-provider"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }

      + auto_scaling_group_provider {
          + auto_scaling_group_arn         = (known after apply)
          + managed_termination_protection = (known after apply)

          + managed_scaling {
              + instance_warmup_period    = (known after apply)
              + maximum_scaling_step_size = (known after apply)
              + minimum_scaling_step_size = (known after apply)
              + status                    = (known after apply)
              + target_capacity           = (known after apply)
            }
        }
    }

  # module.mlra-ecs.aws_ecs_cluster.ecs_cluster will be created
  + resource "aws_ecs_cluster" "ecs_cluster" {
      + arn                = (known after apply)
      + capacity_providers = (known after apply)
      + id                 = (known after apply)
      + name               = "mlra"
      + tags_all           = (known after apply)

      + default_capacity_provider_strategy {
          + base              = (known after apply)
          + capacity_provider = (known after apply)
          + weight            = (known after apply)
        }

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # module.mlra-ecs.aws_ecs_cluster_capacity_providers.ecs_cluster will be created
  + resource "aws_ecs_cluster_capacity_providers" "ecs_cluster" {
      + cluster_name = "mlra"
      + id           = (known after apply)
    }

  # module.mlra-ecs.aws_ecs_service.ecs_service will be created
  + resource "aws_ecs_service" "ecs_service" {
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 1
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + health_check_grace_period_seconds  = 300
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "EC2"
      + name                               = "mlra-ecs-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags                               = {
          + "Name"                   = "mlra-ecs-service"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all                           = {
          + "Name"                   = "mlra-ecs-service"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + task_definition                    = (known after apply)
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "mlra"
          + container_port   = 8080
          + target_group_arn = (known after apply)
        }

      + ordered_placement_strategy {
          + field = "attribute:ecs.availability-zone"
          + type  = "spread"
        }
    }

  # module.mlra-ecs.aws_ecs_task_definition.linux_ecs_task_definition[0] will be created
  + resource "aws_ecs_task_definition" "linux_ecs_task_definition" {
      + arn                      = (known after apply)
      + container_definitions    = (sensitive)
      + execution_role_arn       = (known after apply)
      + family                   = "mlra-task-definition"
      + id                       = (known after apply)
      + network_mode             = "bridge"
      + requires_compatibilities = [
          + "EC2",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags                     = {
          + "Name"                   = "mlra-linux-task-definition"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all                 = {
          + "Name"                   = "mlra-linux-task-definition"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }

      + volume {
          + name = "upload_volume"
        }
    }

  # module.mlra-ecs.aws_iam_instance_profile.ec2_instance_profile will be created
  + resource "aws_iam_instance_profile" "ec2_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "mlra-ec2-instance-profile"
      + path        = "/"
      + role        = "mlra-ec2-instance-role"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.mlra-ecs.aws_iam_policy.ec2_instance_policy will be created
  + resource "aws_iam_policy" "ec2_instance_policy" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "mlra-ec2-instance-policy"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:DescribeTags",
                          + "ec2:DescribeInstances",
                          + "ecs:CreateCluster",
                          + "ecs:DeregisterContainerInstance",
                          + "ecs:DiscoverPollEndpoint",
                          + "ecs:Poll",
                          + "ecs:RegisterContainerInstance",
                          + "ecs:StartTelemetrySession",
                          + "ecs:UpdateContainerInstancesState",
                          + "ecs:Submit*",
                          + "ecr:GetAuthorizationToken",
                          + "ecr:BatchCheckLayerAvailability",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:*",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                          + "logs:CreateLogGroup",
                          + "logs:DescribeLogStreams",
                          + "s3:ListBucket",
                          + "s3:*Object*",
                          + "kms:Decrypt",
                          + "kms:Encrypt",
                          + "kms:GenerateDataKey",
                          + "kms:ReEncrypt",
                          + "kms:GenerateDataKey",
                          + "kms:DescribeKey",
                          + "xray:PutTraceSegments",
                          + "xray:PutTelemetryRecords",
                          + "xray:GetSamplingRules",
                          + "xray:GetSamplingTargets",
                          + "xray:GetSamplingStatisticSummaries",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # module.mlra-ecs.aws_iam_policy.ecs_task_execution_s3_policy will be created
  + resource "aws_iam_policy" "ecs_task_execution_s3_policy" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "mlra-ecs-task-execution-s3-policy"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                          + "s3:*Object*",
                          + "kms:Decrypt",
                          + "kms:Encrypt",
                          + "kms:GenerateDataKey",
                          + "kms:ReEncrypt",
                          + "kms:GenerateDataKey",
                          + "kms:DescribeKey",
                          + "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                          + "elasticloadbalancing:DeregisterTargets",
                          + "elasticloadbalancing:Describe*",
                          + "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                          + "elasticloadbalancing:RegisterTargets",
                          + "ec2:Describe*",
                          + "ec2:AuthorizeSecurityGroupIngress",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # module.mlra-ecs.aws_iam_role.ec2_instance_role will be created
  + resource "aws_iam_role" "ec2_instance_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "mlra-ec2-instance-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.mlra-ecs.aws_iam_role.ecs-autoscale-role will be created
  + resource "aws_iam_role" "ecs-autoscale-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "application-autoscaling.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ecs-scale-application"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.mlra-ecs.aws_iam_role.ecs_task_execution_role will be created
  + resource "aws_iam_role" "ecs_task_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = (known after apply)
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "mlra-ecs-task-execution-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Name"                   = "mlra-ecs-task-execution-role"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all              = {
          + "Name"                   = "mlra-ecs-task-execution-role"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.AmazonSSMManagedInstanceCore will be created
  + resource "aws_iam_role_policy_attachment" "AmazonSSMManagedInstanceCore" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + role       = "mlra-ec2-instance-role"
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.CloudWatchAgentServerPolicy will be created
  + resource "aws_iam_role_policy_attachment" "CloudWatchAgentServerPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      + role       = "mlra-ec2-instance-role"
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.attach_ec2_policy will be created
  + resource "aws_iam_role_policy_attachment" "attach_ec2_policy" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "mlra-ec2-instance-role"
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.ecs-autoscale will be created
  + resource "aws_iam_role_policy_attachment" "ecs-autoscale" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
      + role       = (known after apply)
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.ecs_task_execution_role will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_execution_role" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      + role       = "mlra-ecs-task-execution-role"
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.ecs_task_s3_access will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_s3_access" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "mlra-ecs-task-execution-role"
    }

  # module.mlra-ecs.aws_iam_role_policy_attachment.ecs_task_secrets_manager will be created
  + resource "aws_iam_role_policy_attachment" "ecs_task_secrets_manager" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
      + role       = "mlra-ecs-task-execution-role"
    }

  # module.mlra-ecs.aws_launch_template.ec2-launch-template will be created
  + resource "aws_launch_template" "ec2-launch-template" {
      + arn             = (known after apply)
      + default_version = (known after apply)
      + ebs_optimized   = "true"
      + id              = (known after apply)
      + image_id        = "ami-0631049bf050d0d46"
      + instance_type   = "m5.large"
      + latest_version  = (known after apply)
      + name            = (known after apply)
      + name_prefix     = "mlra-ec2-launch-template"
      + tags            = {
          + "Name"                   = "mlra-ecs-cluster-template"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all        = {
          + "Name"                   = "mlra-ecs-cluster-template"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + user_data       = "IyEvYmluL2Jhc2ggLXhlCmVjaG8gRUNTX0NMVVNURVI9bWxyYSA+PiAvZXRjL2Vjcy9lY3MuY29uZmlnCnl1bSBpbnN0YWxsIC15IGF3c2xvZ3MKY2F0ID4vZXRjL2F3c2xvZ3MvYXdzbG9ncy5jb25mIDw8LUVPRgpbZ2VuZXJhbF0Kc3RhdGVfZmlsZSA9IC92YXIvbGliL2F3c2xvZ3MvYWdlbnQtc3RhdGUKWy92YXIvbG9nL3NlY3VyZV0KZGF0ZXRpbWVfZm9ybWF0ID0gJWIgJWQgJUg6JU06JVMKZmlsZSA9IC92YXIvbG9nL3NlY3VyZQpidWZmZXJfZHVyYXRpb24gPSA1MDAwCmxvZ19zdHJlYW1fbmFtZSA9IHNlY3VyZS97aW5zdGFuY2VfaWR9CmluaXRpYWxfcG9zaXRpb24gPSBzdGFydF9vZl9maWxlCmxvZ19ncm91cF9uYW1lID0gbWxyYS1FQzIKWy92YXIvbG9nL21lc3NhZ2VzXQpkYXRldGltZV9mb3JtYXQgPSAlYiAlZCAlSDolTTolUwpmaWxlID0gL3Zhci9sb2cvbWVzc2FnZXMKYnVmZmVyX2R1cmF0aW9uID0gNTAwMApsb2dfc3RyZWFtX25hbWUgPSBtZXNzYWdlcy97aW5zdGFuY2VfaWR9CmluaXRpYWxfcG9zaXRpb24gPSBzdGFydF9vZl9maWxlCmxvZ19ncm91cF9uYW1lID0gbWxyYS1FQzIKWy92YXIvbG9nL2Vjcy9lY3MtaW5pdC5sb2ddCmRhdGV0aW1lX2Zvcm1hdCA9ICVZLSVtLSVkVCVIOiVNOiVTWgpmaWxlID0gL3Zhci9sb2cvZWNzL2Vjcy1pbml0LmxvZwpidWZmZXJfZHVyYXRpb24gPSA1MDAwCmluaXRpYWxfcG9zaXRpb24gPSBzdGFydF9vZl9maWxlCmxvZ19zdHJlYW1fbmFtZSA9IGVjcy1pbml0L3tpbnN0YW5jZV9pZH0KbG9nX2dyb3VwX25hbWUgPSBtbHJhLUVDMgpbL3Zhci9sb2cvZWNzL2Vjcy1hZ2VudC5sb2ddCmRhdGV0aW1lX2Zvcm1hdCA9ICVZLSVtLSVkVCVIOiVNOiVTWgpmaWxlID0gL3Zhci9sb2cvZWNzL2Vjcy1hZ2VudC5sb2cuKgpidWZmZXJfZHVyYXRpb24gPSA1MDAwCmluaXRpYWxfcG9zaXRpb24gPSBzdGFydF9vZl9maWxlCmxvZ19zdHJlYW1fbmFtZSA9IGVjcy1hZ2VudC97aW5zdGFuY2VfaWR9CmxvZ19ncm91cF9uYW1lID0gbWxyYS1FQzIKRU9GCmNobW9kIDY0NCAvZXRjL2F3c2xvZ3MvYXdzbG9ncy5jb25mCiMgQ2hhbmdlIHJlZ2lvbgpzZWQgLWkgJ3MvXnJlZ2lvbiA9IC4qL3JlZ2lvbiA9IGV1LXdlc3QtMi9nJyAvZXRjL2F3c2xvZ3MvYXdzY2xpLmNvbmYKc3VkbyBzeXN0ZW1jdGwgc3RhcnQgYXdzbG9nc2QKc3VkbyBzeXN0ZW1jdGwgZW5hYmxlIGF3c2xvZ3NkLnNlcnZpY2UKc3lzdGVtY3RsIGVuYWJsZSBkb2NrZXIKIyBDbG91ZHdhdGNoIEFnZW50CmFtYXpvbi1saW51eC1leHRyYXMgaW5zdGFsbCBjb2xsZWN0ZAp5dW0gaW5zdGFsbCAteSBhbWF6b24tY2xvdWR3YXRjaC1hZ2VudAphd3MgczMgY3AgczM6Ly9sYWEtc29mdHdhcmUtbGlicmFyeS9jbG91ZHdhdGNoLWFnZW50LWNvbmZpZy9jb25maWcuanNvbiAvb3B0L2F3cy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC9iaW4vLgphbWF6b24tY2xvdWR3YXRjaC1hZ2VudC1jdGwgLWEgc3RvcAphbWF6b24tY2xvdWR3YXRjaC1hZ2VudC1jdGwgLWEgZmV0Y2gtY29uZmlnIC1tIGVjMiAtYyBmaWxlOi9vcHQvYXdzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50L2Jpbi9jb25maWcuanNvbiAtcw=="

      + block_device_mappings {
          + device_name = "/dev/xvda"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = 0
              + throughput            = (known after apply)
              + volume_size           = 30
              + volume_type           = "gp2"
            }
        }

      + iam_instance_profile {
          + name = "mlra-ec2-instance-profile"
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_protocol_ipv6          = "disabled"
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = "required"
          + instance_metadata_tags      = "disabled"
        }

      + monitoring {
          + enabled = true
        }

      + network_interfaces {
          + associate_public_ip_address = "false"
          + security_groups             = (known after apply)
        }

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Name"                   = "mlra-ecs-cluster"
              + "application"            = "mlra"
              + "business-unit"          = "LAA"
              + "environment-name"       = "mlra-test"
              + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
              + "is-production"          = "false"
              + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
              + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
            }
        }
      + tag_specifications {
          + resource_type = "volume"
          + tags          = {
              + "Name"                   = "mlra-ecs-cluster"
              + "application"            = "mlra"
              + "business-unit"          = "LAA"
              + "environment-name"       = "mlra-test"
              + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
              + "is-production"          = "false"
              + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
              + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
            }
        }
    }

  # module.mlra-ecs.aws_security_group.cluster_ec2 will be created
  + resource "aws_security_group" "cluster_ec2" {
      + arn                    = (known after apply)
      + description            = "controls access to the cluster ec2 instance"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Cluster EC2 loadbalancer egress rule"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.26.96.0/21",
                ]
              + description      = "Cluster EC2 ingress rule 2"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = [
                  + "10.26.96.0/21",
                ]
              + description      = "Cluster EC2 ingress rule 3"
              + from_port        = 32768
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 61000
            },
          + {
              + cidr_blocks      = [
                  + "10.26.96.0/21",
                ]
              + description      = "Cluster EC2 ingress rule 4"
              + from_port        = 1521
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 1521
            },
          + {
              + cidr_blocks      = [
                  + "10.26.96.0/21",
                ]
              + description      = "Cluster EC2 ingress rule"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "mlra-cluster-ec2-security-group"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name"                   = "mlra-cluster-ec2-security-group"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all               = {
          + "Name"                   = "mlra-cluster-ec2-security-group"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + vpc_id                 = (known after apply)
    }

  # module.pagerduty_core_alerts.data.aws_sns_topic.alarm_topics["mlra-test-alerting-topic"] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_sns_topic" "alarm_topics" {
      + arn  = (known after apply)
      + id   = (known after apply)
      + name = "mlra-test-alerting-topic"
    }

  # module.pagerduty_core_alerts.aws_sns_topic_subscription.pagerduty_subscription["mlra-test-alerting-topic"] will be created
  + resource "aws_sns_topic_subscription" "pagerduty_subscription" {
      + arn                             = (known after apply)
      + confirmation_timeout_in_minutes = 1
      + confirmation_was_authenticated  = (known after apply)
      + endpoint                        = (sensitive)
      + endpoint_auto_confirms          = false
      + filter_policy_scope             = (known after apply)
      + id                              = (known after apply)
      + owner_id                        = (known after apply)
      + pending_confirmation            = (known after apply)
      + protocol                        = "https"
      + raw_message_delivery            = false
      + topic_arn                       = (known after apply)
    }

  # module.alb.module.lb-access-logs-enabled.data.aws_iam_policy_document.bucket_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "s3:PutObject",
            ]
          + effect    = "Allow"
          + resources = (sensitive)

          + principals {
              + identifiers = [
                  + "arn:aws:iam::652711504416:root",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:PutObject",
            ]
          + resources = (sensitive)
          + sid       = "AWSLogDeliveryWrite"

          + condition {
              + test     = "StringEquals"
              + values   = [
                  + "bucket-owner-full-control",
                ]
              + variable = "s3:x-amz-acl"
            }

          + principals {
              + identifiers = [
                  + "delivery.logs.amazonaws.com",
                ]
              + type        = "Service"
            }
        }
      + statement {
          + actions   = [
              + "s3:GetBucketAcl",
            ]
          + resources = [
              + (known after apply),
            ]
          + sid       = "AWSLogDeliveryAclCheck"

          + principals {
              + identifiers = [
                  + "delivery.logs.amazonaws.com",
                ]
              + type        = "Service"
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.aws_athena_database.lb-access-logs will be created
  + resource "aws_athena_database" "lb-access-logs" {
      + bucket        = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "loadbalancer_access_logs"

      + encryption_configuration {
          + encryption_option = "SSE_S3"
        }
    }

  # module.alb.module.lb-access-logs-enabled.aws_athena_named_query.main will be created
  + resource "aws_athena_named_query" "main" {
      + database  = "loadbalancer_access_logs"
      + id        = (known after apply)
      + name      = "mlra-create-table"
      + query     = (sensitive)
      + workgroup = "primary"
    }

  # module.alb.module.lb-access-logs-enabled.aws_athena_workgroup.lb-access-logs will be created
  + resource "aws_athena_workgroup" "lb-access-logs" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "mlra-lb-access-logs"
      + state         = "ENABLED"
      + tags_all      = (known after apply)

      + configuration {
          + enforce_workgroup_configuration    = true
          + publish_cloudwatch_metrics_enabled = true
          + requester_pays_enabled             = false

          + result_configuration {
              + output_location = (known after apply)

              + encryption_configuration {
                  + encryption_option = "SSE_S3"
                }
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.aws_lb.loadbalancer will be created
  + resource "aws_lb" "loadbalancer" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = true
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "mlra-lb"
      + preserve_host_header       = false
      + security_groups            = (known after apply)
      + subnets                    = [
          + "subnet-060a6255cef766e59",
          + "subnet-07ae68864214787e5",
          + "subnet-09c80fd5675403724",
        ]
      + tags                       = {
          + "Name"                   = "lb-mlra"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all                   = {
          + "Name"                   = "lb-mlra"
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + access_logs {
          + bucket  = (known after apply)
          + enabled = true
          + prefix  = "mlra"
        }

      + subnet_mapping {
          + allocation_id        = (known after apply)
          + ipv6_address         = (known after apply)
          + outpost_id           = (known after apply)
          + private_ipv4_address = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # module.alb.module.lb-access-logs-enabled.aws_security_group.lb will be created
  + resource "aws_security_group" "lb" {
      + arn                    = (known after apply)
      + description            = "Controls access to the loadbalancer"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Loadbalancer egress rule"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.203.0.0/20",
                ]
              + description      = "Loadbalancer ingress rule"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "mlra-lb-security-group"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = "vpc-03b493ca0dc364b78"
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].data.aws_iam_policy_document.default will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default" {
      + id                        = (known after apply)
      + json                      = (known after apply)
      + override_policy_documents = [
          + (known after apply),
        ]

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = (known after apply)
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = "mlra-lb-access-logs"
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + tags_all                    = {
          + "application"            = "mlra"
          + "business-unit"          = "LAA"
          + "environment-name"       = "mlra-test"
          + "infrastructure-support" = "modernisation-platform@digital.justice.gov.uk"
          + "is-production"          = "false"
          + "owner"                  = "laa-crime-apps@digital.justice.gov.uk"
          + "source-code"            = "https://github.com/ministryofjustice/modernisation-platform-environments"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule {
          + allowed_headers = (known after apply)
          + allowed_methods = (known after apply)
          + allowed_origins = (known after apply)
          + expose_headers  = (known after apply)
          + max_age_seconds = (known after apply)
        }

      + grant {
          + id          = (known after apply)
          + permissions = (known after apply)
          + type        = (known after apply)
          + uri         = (known after apply)
        }

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = (known after apply)
          + enabled                                = (known after apply)
          + id                                     = (known after apply)
          + prefix                                 = (known after apply)
          + tags                                   = (known after apply)

          + expiration {
              + date                         = (known after apply)
              + days                         = (known after apply)
              + expired_object_delete_marker = (known after apply)
            }

          + noncurrent_version_expiration {
              + days = (known after apply)
            }

          + noncurrent_version_transition {
              + days          = (known after apply)
              + storage_class = (known after apply)
            }

          + transition {
              + date          = (known after apply)
              + days          = (known after apply)
              + storage_class = (known after apply)
            }
        }

      + logging {
          + target_bucket = (known after apply)
          + target_prefix = (known after apply)
        }

      + object_lock_configuration {
          + object_lock_enabled = (known after apply)

          + rule {
              + default_retention {
                  + days  = (known after apply)
                  + mode  = (known after apply)
                  + years = (known after apply)
                }
            }
        }

      + replication_configuration {
          + role = (known after apply)

          + rules {
              + delete_marker_replication_status = (known after apply)
              + id                               = (known after apply)
              + prefix                           = (known after apply)
              + priority                         = (known after apply)
              + status                           = (known after apply)

              + destination {
                  + account_id         = (known after apply)
                  + bucket             = (known after apply)
                  + replica_kms_key_id = (known after apply)
                  + storage_class      = (known after apply)

                  + access_control_translation {
                      + owner = (known after apply)
                    }

                  + metrics {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }

                  + replication_time {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }
                }

              + filter {
                  + prefix = (known after apply)
                  + tags   = (known after apply)
                }

              + source_selection_criteria {
                  + sse_kms_encrypted_objects {
                      + enabled = (known after apply)
                    }
                }
            }
        }

      + server_side_encryption_configuration {
          + rule {
              + bucket_key_enabled = (known after apply)

              + apply_server_side_encryption_by_default {
                  + kms_master_key_id = (known after apply)
                  + sse_algorithm     = (known after apply)
                }
            }
        }

      + versioning {
          + enabled    = (known after apply)
          + mfa_delete = (known after apply)
        }

      + website {
          + error_document           = (known after apply)
          + index_document           = (known after apply)
          + redirect_all_requests_to = (known after apply)
          + routing_rules            = (known after apply)
        }
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_acl.default will be created
  + resource "aws_s3_bucket_acl" "default" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy {
          + grant {
              + permission = (known after apply)

              + grantee {
                  + display_name  = (known after apply)
                  + email_address = (known after apply)
                  + id            = (known after apply)
                  + type          = (known after apply)
                  + uri           = (known after apply)
                }
            }

          + owner {
              + display_name = (known after apply)
              + id           = (known after apply)
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_lifecycle_configuration.default will be created
  + resource "aws_s3_bucket_lifecycle_configuration" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + id     = "main"
          + status = "Enabled"

          + abort_incomplete_multipart_upload {
              + days_after_initiation = 7
            }

          + expiration {
              + days                         = 730
              + expired_object_delete_marker = (known after apply)
            }

          + filter {
            }

          + noncurrent_version_expiration {
              + noncurrent_days = 730
            }

          + noncurrent_version_transition {
              + noncurrent_days = 365
              + storage_class   = "GLACIER"
            }
          + noncurrent_version_transition {
              + noncurrent_days = 90
              + storage_class   = "STANDARD_IA"
            }

          + transition {
              + days          = 365
              + storage_class = "GLACIER"
            }
          + transition {
              + days          = 90
              + storage_class = "STANDARD_IA"
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_policy.default will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "aws:kms"
            }
        }
    }

  # module.alb.module.lb-access-logs-enabled.module.s3-bucket[0].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

Plan: 69 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
