---
schemaVersion: "2.2"
description: "run modernisation-platform-configuration-management ansible-playbooks against EC2 instances"
parameters:
  PlaybookFile:
    type: "String"
    description: "(Optional) The Playbook file to run (including relative path). If the main Playbook file is located in the ./automation directory, then specify automation/playbook.yml."
    default: "site.yml"
  ExtraVariables:
    type: "String"
    description: "(Optional) Additional variables to pass to Ansible at runtime. Enter key/value pairs separated by a space. For example: color=red flavor=cherry"
    default: "SSM=True"
    displayType: "textarea"
    allowedPattern: "^$|^\\w+\\=(([^\\s|:();&]+)|('[^|:();&]+'))(\\s+\\w+\\=(([^\\s|:();&]+)|('[^|:();&]+')))*$"
  Check:
    type: "String"
    description: "(Optional) Use this parameter to run a check of the Ansible execution. The system doesn’t make any changes to your systems. Instead, any module that supports check mode reports the changes it would make rather than making them. Modules that don’t support check mode take no action and don’t report changes that would be made."
    allowedValues:
      - "True"
      - "False"
    default: "True"
  Verbose:
    type: "String"
    description: "(Optional) Set the verbosity level for logging Playbook executions. Specify -v for low verbosity, -vv or –vvv for medium verbosity, and -vvvv for debug level."
    allowedValues:
      - "-v"
      - "-vv"
      - "-vvv"
      - "-vvvv"
    default: "-v"
  TimeoutSeconds:
    type: "String"
    description: "(Optional) The time in seconds for a command to be completed before it is considered to have failed."
    default: "3600"
  Role:
    type: "String"
    description: "(Optional) The role to run, not that not all roles are applicable for all targets!"
    allowedValues:
      - "all"
      - "db-restore"
      - "domain-search"
      - "get-ec2-facts"
      - "set-ec2-hostname"
      - "oracle-db-monitoring"
      - "oracle-secure-web"
    default: "all"
  Tags:
    type: "String"
    description: "(Optional) The ansible tags to run (comma separated)"
    default: "ec2patch"
    displayType: "textarea"
mainSteps:
  - action: "aws:runShellScript"
    name: "gitInstalled"
    inputs:
      runCommand:
        - 'if which git; then echo "git is installed"; else sudo yum install git -y; fi'
  - action: "aws:runShellScript"
    name: "createTempDir"
    inputs:
      runCommand:
        - 'ansible_dir=$(mkdir -d); echo "ansible_dir=$ansible_dir"'
  - action: "aws:downloadContent"
    name: "downloadFromConfigurationManagementRepo"
    inputs:
      sourceType: "GitHub"
      sourceInfo: '{"owner":"ministryofjustice","repository":"modernisation-platform-configuration-management","path":"ansible","getOptions":"branch:refs/heads/main","tokenInfo":"{{ssm-secure:github-ci-user-pat}}"}'
      destinationPath: "$ansible_dir"
  - action: "aws:runShellScript"
    name: "installAndRunAnsible"
    inputs:
      timeoutSeconds: "{{ TimeoutSeconds }}"
      runCommand:
        - |
          # Retrieving API Token
          token=$(curl -sS -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          # Retrieving Instance ID
          instance_id=$(curl -sS -H "X-aws-ec2-metadata-token: $token" -v http://169.254.169.254/latest/meta-data/instance-id)
          # Retrieving tag server-type value using aws cli
          server_type=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=server-type" --output=text | cut -f5 | sed 's/-/_/g')
          # Retrieving tag environment-name value using aws cli
          environment_name=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=environment-name" --output=text | cut -f5 | sed 's/-/_/g')
          echo "server_type=$server_type"
          echo "environment_name=$environment_name"
          # set python version
          if [[ $(which python3.9) ]]; then
            python=$(which python3.9)
          elif [[ $(which python3.6) ]]; then
            python=$(which python3.6)
          else
          echo "Python3.9/3.6 not found"
          exit 1
          fi
          echo "# Using python: $python"
          # activate virtual environment
          mkdir $ansible_dir/python-venv && cd "$_"
          $python -m venv ansible
          source ansible/bin/activate
          $python -m pip install --upgrade pip
          if [[ "$python" =~ 3.6 ]]; then
            $python -m pip install wheel
            $python -m pip install cryptography==2.3
            export LC_ALL=en_US.UTF-8
            $python -m pip install ansible-core==2.11.12
          else
            $python -m pip install ansible==6.0.0
          fi
          # install requirements in virtual env
          cd $ansible_dir
          ls -l
          echo "# Installing ansible requirements"
          $python -m pip install -r requirements.txt
          ansible-galaxy role install -r requirements.yml
          ansible-galaxy collection install -r requirements.yml
          # run ansible (comma after localhost deliberate)
          echo "# Execute ansible"
          if [[ "{{Check}}" == True ]]; then \
            ansible-playbook "{{Verbose}}" site.yml \
            --check \
            --connection=local \
            --inventory localhost, \
            --extra-vars "role={{Role}}" \
            --extra-vars "ansible_python_interpreter=$python" \
            --extra-vars "target=localhost" \
            --extra-vars "@group_vars/environment_name_$environment_name.yml" \
            --extra-vars "@group_vars/server_type_$server_type.yml" \
            --tags "{{Tags}}" \
            --become
          else
            ansible-playbook "{{Verbose}}" site.yml \
            --connection=local \
            --inventory localhost, \
            --extra-vars "role={{Role}}" \
            --extra-vars "ansible_python_interpreter=$python" \
            --extra-vars "target=localhost" \
            --extra-vars "@group_vars/environment_name_$environment_name.yml" \
            --extra-vars "@group_vars/server_type_$server_type.yml" \
            --tags "{{Tags}}" \
            --become
          fi
          echo "# Cleanup"
          deactivate
          rm -rf $ansible_dir/python-venv
          rm -rf $ansible_dir/
