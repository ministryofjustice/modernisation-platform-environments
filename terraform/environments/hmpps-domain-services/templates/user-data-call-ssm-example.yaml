# This is an EC2Launch V2 type user-data script
# https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-settings.html#ec2launch-v2-task-configuration
# See C:\ProgramData\Amazon\EC2Launch\log for logs
version: 1.0 # version 1.0 is required as this executes AFTER the SSM Agent is running
tasks:
  - task: executeScript
    inputs:
      - frequency: always
        type: powershell
        runAs: admin
        content: |-
          # Get EC2 Instance facts
          if (-Not (Get-Module -ListAvailable -Name "AWSPowerShell")) {
            Install-Package -Name "AWSPowerShell" -Force -SkipPublisherCheck
          }

          # Example code for getting EC2 Instance facts

          $instanceId = Get-EC2InstanceMetadata -Category InstanceId

          Write-Debug "instanceId: $instanceId"

          # Get the EC2 instance details
          $instance = Get-EC2Instance -InstanceId $instanceId | Select-Object -ExpandProperty Instances

          # Get the EC2 instance tag value for the tag 'Name'
          $TagName = ( $instance.Tag | Where-Object { $_.Key -eq "Name"} ).Value

          Write-Debug "instance: $instance"

          # Write the EC2 instance details to a file as Json
          New-Item -Type File -Path "C:\Temp\instanceinfo.txt" -Force 
          $instanceJson = $instance | ConvertTo-Json -Depth 10
          Add-Content -Path "C:\Temp\instanceinfo.txt" -Value $instanceJson
      
          # Write the EC2 instance tag value for the tag 'Name' to a file
          Add-Content -Path "C:\Temp\instanceinfo.txt" -Value "Tag = Name: $TagName"

          # NOTE: Values from one code block like the one above are NOT available in subsequent blocks
          # This means that if you wanted to supply a new hostname in an instance tag via terraform you
          # would need to execute the $instanceId EC2InstanceMetadata and EC2Instance lookups in the block 
          # where the value is needed
          #
          # When calling SSM documents it's likely better if the ssm-document does all the lookups for parameter values
          # See windows-domain-join.yaml as a good example of this.
      - frequency: once
        type: powershell
        runAs: admin
        content: |-
          # NOTE: EC2 Instance calling SSM documents MUST have ssm:SendCommand permissions for [*] resources

          # Install AWS PowerShell module if not already installed
          if (-Not (Get-Module -ListAvailable -Name "AWSPowerShell")) {
            Install-Package -Name "AWSPowerShell" -Force -SkipPublisherCheck
          }

          $logFile = "C:\Temp\user_data_status.txt"

          # Create a file to track the status of the user data script
          if (-Not (Test-Path -Path $logFile)) {
            New-Item -Type File -Path $logFile -Force
          }

          Function Get-SSMAgentStatus {
            $service = Get-Service -Name "AmazonSSMAgent"
            if ($service.Status -eq "Running") {
                return $true
            } else {
                Start-Service -Name "AmazonSSMAgent" -Force
            }
          }

          Function Invoke-SSMDocument {
            param(
              [Parameter(Mandatory = $true)]
              [PSCustomObject]$SSMDocumentObject
            )

            $DocumentName = $SSMDocumentObject.PSObject.Properties.Name
            $Parameters = $SSMDocumentObject.$DocumentName

            $instanceId = Get-EC2InstanceMetadata -Category InstanceId

            Add-Content -Path $logFile -Value "Executing SSM Document $DocumentName with newHostname $Parameters.newHostname $(Get-Date)"

            Add-Content -Path $logFile -Value "Executing on instance $instanceId. $(Get-Date)"

            $commandId = Send-SSMCommand -InstanceId $instanceId -DocumentName $DocumentName -Parameter $Parameters -Force
            Add-Content -Path $logFile -Value "Executed SSM command with Command ID: $($commandId.CommandId) $(Get-Date)"
          }

          $ssmDocuments = @(
            [PSCustomObject]@{
              "windows-domain-join" = @{
                "newHostname" = "tag:Name" # default value when calling windows-domain-join
                }
            }
          )

          # EXAMPLE SSMDOCUMENTS list
          # $ssmDocuments = @(
          # [PSCustomObject]@{
          #   "windows-psreadline-fix" = @{}
          # },
          # [PSCustomObject]@{
          #   "another-ssm-doc" = @{
          #     # Add your parameters here as a hashtable.
          #     # Quoting depends on the values, special characters etc.
          #     # Example:
          #     # Param1 = "Value1"
          #     # Param2 = "Value2"
          #   }
          # }            
          #)

          $startTime = Get-Date

          # Main loop to wait for SSM Agent to be running & run multiple ssm docs with parameters
          do {
            if (Get-SSMAgentStatus) {
              Add-Content -Path $logFile -Value "SSM Agent is running, executing SSM command. $(Get-Date)"

              foreach ($ssmDocument in $ssmDocuments) {
                Add-Content -Path $logFile -Value "SSM Document $ssmDocument run has started. $(Get-Date)"
                Invoke-SSMDocument -SSMDocumentObject $ssmDocument
              }
              break
            } else {
              Add-Content -Path $logFile -Value "SSM Agent is not running yet. $(Get-Date) Waiting..."
              Start-Sleep -Seconds 10
            }
          } while ((Get-Date) -lt $startTime.AddMinutes(10))

