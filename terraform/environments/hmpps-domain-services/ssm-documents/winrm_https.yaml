---
schemaVersion: "2.2"
description: "SSM Document for enabling WinRM over HTTPS"
mainSteps:
  - name: EnableWinRMHTTPS
    action: aws:runPowerShellScript
    precondition:
      StringEquals:
        - platformType
        - Windows
    inputs:
      runCommand:
        - |
          $ErrorActionPreference = "Stop";
          $HostName = $env:COMPUTERNAME
          $HostIP=(Get-NetAdapter| Get-NetIPAddress).IPv4Address|Out-String

          # Create a self-signed certificate
          $HostSSCert = New-SelfSignedCertificate -DnsName $HostName,$HostIP -CertStoreLocation Cert:\LocalMachine\My

          # Remove default listeners
          Get-ChildItem wsman:\localhost\Listener\ | Where-Object -Property Keys -like 'Transport=HTTP*' | Remove-Item -Recurse 

          # Create a new listener bound to the self-signed certificate
          New-Item -Path WSMan:\localhost\Listener\ -Transport HTTPS -Address * -CertificateThumbPrint $HostSSCert.Thumbprint -Force

          $FirewallRules = Get-NetFirewallRule
          $WinRMHttpsRule = @{
              DisplayName = "WinRM - Powershell remoting HTTPS-In"
              LocalPort = 5986
              Protocol = "TCP" 
              Action = "Allow"
              Profile = "Any"
          }

          # Create a firewall rule for WinRM HTTPS traffic if it does not exist
          if (-not $FirewallRules.DisplayName.Contains($WinRMHttpsRule.DisplayName)) {
              New-NetFirewallRule @WinRMHttpsRule
          }

          Restart-Service WinRM

          # Test WinRM
          Export-Certificate -Cert $HostSSCert -FilePath c:\SSL_PS_Remoting.cer
          Import-Certificate -FilePath c:\SSL_PS_Remoting.cer -CertStoreLocation Cert:\LocalMachine\root\
          del c:\SSL_PS_Remoting.cer

          if(Test-WSMan -ComputerName $HostName -Authentication Negotiate -UseSSL){
            Write-Host "WinRM HTTPS is enabled" 
          } else {
            Write-Error "WinRM HTTPS is not enabled"
          }