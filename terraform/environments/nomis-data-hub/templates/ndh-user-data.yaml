# This is an EC2Launch V2 type user-data script
# https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-settings.html#ec2launch-v2-task-configuration
# See C:\ProgramData\Amazon\EC2Launch\log for logs
version: 1.1
tasks:
  - task: executeScript
    inputs:
      - frequency: once
        type: powershell
        runAs: admin
        # Set time to local and locale
        content: |
          # $ErrorActionPreference = "Stop" # un-comment to set all errors to terminate script 

          Set-TimeZone "GMT Standard Time"
          Set-WinSystemLocale "en-GB"        
      - frequency: once
        type: powershell
        runAs: admin
        # Install apps        
        content: |
          # $ErrorActionPreference = "Stop" # un-comment to set all errors to terminate script

          $apps = @(
            "firefox"
            "libreoffice-still"
            "notepadplusplus.install"
            "putty.install"
            "winscp.install"
            "postman"
            "vcredist140" # dependency for wireshark
            "wireshark"
            "jre8"
          )

          foreach ($app in $apps) {
            choco install $app -y
          }
      - frequency: once
        type: powershell
        runAs: admin
        # Download SQL Developer
        content: |
          # $ErrorActionPreference = "Stop" # un-comment to set all errors to terminate script

          $S3_BUCKET = "mod-platform-image-artefact-bucket20230203091453221500000001"

          Read-S3Object -BucketName $S3_BUCKET -Key "hmpps/sqldeveloper/sqldeveloper-22.2.1.234.1810-x64.zip" -File "C:\management-server-software\sqldeveloper-22.2.1.234.1810-x64.zip"

          # Extract SQL Developer - there is no installer for this application
          Expand-Archive -Path "C:\management-server-software\sqldeveloper-22.2.1.234.1810-x64.zip" -DestinationPath "C:\Program Files\Oracle"

          # Create a desktop shortcut
          $shortcut = New-Object -ComObject WScript.Shell
          $shortcut_link = $shortcut.CreateShortcut("C:\Users\Public\Desktop\SQL Developer.lnk")
          $shortcut_link.TargetPath = "C:\Program Files\Oracle\sqldeveloper\sqldeveloper.exe"
          $shortcut_link.Save()
      - frequency: once
        type: powershell
        runAs: admin
        # Download NDH specific files
        # Doing it this way because 'Get-Objects' (folder download) permissions are not available
        content: |
          # $ErrorActionPreference = "Stop" # un-comment to set all errors to terminate script
          $S3_BUCKET_NDH = "nomis-data-hub-software20230309164626754200000003"

          $objects = Get-S3Object -BucketName $S3_BUCKET_NDH -Prefix "ndh-installation-files/WindowsInstalls/" -Delimiter '/'

          $objects = $objects[1..($objects.Length-1)] # removes folder itself from objects list

          foreach($obj in $objects) {
            $file=$obj.Key.Split("/")[-1]
            Read-S3Object -BucketName $S3_BUCKET_NDH -Key $obj.Key -File "C:\tibco\files\$file" 
          }
      - frequency: once
        type: powershell
        runAs: admin
        content: |
          # TODO: This is not implemented yet. Will be automated later.
          # IMPORTANT: may have to merge this step with the one above to use obj.Key names for unzipping
          # Alternatively, get the contents of the destination folder above and unzip them if the destinations are all the same
          # Unzip NDG GEMS4 files to C:\tibco\files\GEMS4 
          # $ErrorActionPreference = "Stop" # un-comment to set all errors to terminate script

          # Expand-Archive -LiteralPath "C:\tibco\files\GEMS4.zip" -DestinationPath "C:\tibco\files\GEMS4" -Force -PassThru # target folder is created if it doesn't exist
      - frequency: once
        type: powershell
        runAs: admin
        #not actually a secret
        #checkov:skip=CKV_SECRET_6: "Base64 High Entropy String"
        # Install Cloudwatch agent if missing, otherwise update config and start it
        content: |
          # $ErrorActionPreference = "Stop" # set all errors to terminate script
          $timeout = New-TimeSpan -Seconds 600
          $endTime = (Get-Date).Add($timeout)
          $cwagent = Get-Service -Name "AmazonCloudWatchAgent"
          
          # Check if parameter doc exists before trying to use it
          Get-SSMParameter -Name 'cloud-watch-config-windows' -Region 'eu-west-2'
          if ($?) {
            Write-Host "Parameter cloud-watch-config-windows found, continuing"
          } else {
            Write-Host "Parameter cloud-watch-config-windows not found, exiting"
            exit 1
          }

          if ($cwagent) {
            Do {
            & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c ssm:cloud-watch-config-windows
            } Until ((Get-Service -Name "AmazonCloudWatchAgent" | Where-Object {$_.Status -eq "Running"}) -or ((Get-Date) -gt $endTime))
          } else {
            Invoke-WebRequest -Uri "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi" -OutFile "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi"
            $cwagent_installer = "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi"
            Start-Process -FilePath msiexec.exe -ArgumentList "/i $cwagent_installer /qn" -Wait
            Do {
            & "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c ssm:cloud-watch-config-windows
            } Until ((Get-Service -Name "AmazonCloudWatchAgent" | Where-Object {$_.Status -eq "Running"}) -or ((Get-Date) -gt $endTime))
          }
