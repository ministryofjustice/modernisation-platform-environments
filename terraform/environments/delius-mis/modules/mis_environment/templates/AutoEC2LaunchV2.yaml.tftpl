version: 1.0
tasks:
- task: executeScript
  inputs:
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Wait for EBS volumes to be attached
        Write-Output "Waiting 30 seconds for EBS volumes to attach..."
        Start-Sleep -Seconds 30
- task: initializeVolume
  inputs:
    initialize: devices
    devices:
    - device: xvdd
      name: App
      letter: D
      partition: gpt
- task: executeScript
  inputs:
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Install / upgrade PSReadline module which doesn't work on base image
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force

        Install-Module -Name PSReadLine -Repository PSGallery -MinimumVersion 2.2.2 -Force -AllowClobber -Confirm:$false

        # delete old versions of Windows PowerShell PSReadline which are the issue

        $psreadlineModuleDirectories = Get-ChildItem -Path "C:\Program Files\WindowsPowerShell\Modules\PSReadline" -Directory

        foreach ($psreadlineModuleDirectory in $psreadlineModuleDirectories) {
          $moduleDirectoryPath = $psreadlineModuleDirectory.FullName
          $moduleDirectoryName = $psreadlineModuleDirectory.Name

          if ($moduleDirectoryName -le "2.2.2") {
          Remove-Item -Recurse -Force -Path $moduleDirectoryPath
          }
        }

        $PSReadlineVersion = (Get-Module -ListAvailable PSReadLine).Version

        Write-Host "PSReadline Module Version: $PSReadlineVersion"
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Install / upgrade chocolatey since the version installed can be very old
        $ErrorActionPreference = "Stop"
        if (Get-Command choco.exe -ErrorAction SilentlyContinue) {
        $version=choco --version
        if ($version -lt "2.2.2") {
            Write-Output "Upgrading old version of chocolatey $version to 2.2.2"
            choco upgrade chocolatey --version 2.2.2 -y
        } else {
            Write-Output "Chocolatey already installed version $version"
        }
        } else {
        Write-Output "Installing Chocolatey"
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        Start-Sleep -Seconds 1 # helps debugging as logs have different timestamps
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Install git - it should be in AMI but install if missing
        $ErrorActionPreference = "Stop"
        if (Get-Command "git" -ErrorAction SilentlyContinue) {
        Write-Output "git already installed, skipping choco install"
        } else {
        Write-Output "choco upgrade chocolatey-compatibility.extension -y"
        choco upgrade chocolatey-compatibility.extension -y
        Write-Output "choco upgrade chocolatey-core.extension -y"
        choco upgrade chocolatey-core.extension -y
        Write-Output "choco install git.install -y"
        choco install git.install -y
        }
        Start-Sleep -Seconds 1 # helps debugging as logs have different timestamps
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Fallback installation for git
        $ErrorActionPreference = "Stop"
        if (Get-Command "git" -ErrorAction SilentlyContinue) {
        Write-Output "git already installed, skipping fallback install"
        } else {
        Set-Location -Path ([System.IO.Path]::GetTempPath())
        $Url="https://github.com/git-for-windows/git/releases/download/v2.49.0.windows.1/Git-2.49.0-64-bit.exe"
        Write-Output "Fallback installation for git - downloading from $Url"
        Invoke-WebRequest $Url -OutFile ".\Git.exe"
        .\Git.exe /VERYSILENT /NORESTART
        }
        Start-Sleep -Seconds 1 # helps debugging as logs have different timestamps
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        Write-Output "choco upgrade all -y"
        choco upgrade all -y
        Start-Sleep -Seconds 1 # helps debugging as logs have different timestamps
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Install awscli - it should be in AMI but install if missing
        $ErrorActionPreference = "Stop"
        if (Get-Command "aws" -ErrorAction SilentlyContinue) {
        Write-Output "awscli already installed"
        } else {
        Write-Output "choco install awscli -y"
        choco install awscli -y
        }
        Start-Sleep -Seconds 1 # helps debugging as logs have different timestamps
    - frequency: once
      type: powershell
      runAs: admin
      content: |-
        # Run UserData powershell from modernisation-platform-configuration-management repo
        $ErrorActionPreference = "Stop"
        Write-Output "Downloading and running Run-GitScript.ps1"
        Set-Location -Path ([System.IO.Path]::GetTempPath())
        $GitBranch = "${branch}"
        $Script = "Invoke-UserDataScript.ps1"
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 # since powershell 4 uses Tls1 as default
        Invoke-WebRequest "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform-configuration-management/$${GitBranch}/powershell/Scripts/Run-GitScript.ps1" -OutFile "Run-GitScript.ps1"
        . ./Run-GitScript.ps1 $Script -GitBranch $GitBranch
        Exit $LASTEXITCODE
    - frequency: always
      type: powershell
      runAs: admin
      content: |-
        # Join computer to domain if not already joined
        if (! ((Get-WmiObject -Class Win32_ComputerSystem).PartOfDomain) ) {
          # Server is not joined to the domain
          $domainJoinUserName = "${ad_domain_name}\Admin"
          
          $domainJoinPassword = ConvertTo-SecureString((Get-SECSecretValue -SecretId ${ad_password_secret_name}).SecretString) -AsPlainText -Force
          
          $domainJoinCredential = New-Object System.Management.Automation.PSCredential($domainJoinUserName, $domainJoinPassword)
          
          $token = invoke-restmethod -Headers @{"X-aws-ec2-metadata-token-ttl-seconds"=3600} -Method PUT -Uri http://169.254.169.254/latest/api/token
          
          $instanceId = invoke-restmethod -Headers @{"X-aws-ec2-metadata-token" = $token} -Method GET -uri http://169.254.169.254/latest/meta-data/instance-id
          
          Add-Computer -DomainName "${ad_domain_name}" -Credential $domainJoinCredential -NewName $instanceId -Force

          # Install AD Management Tools
          Install-WindowsFeature -Name RSAT-AD-PowerShell
          Install-WindowsFeature -Name RSAT-ADDS-Tools

          # Allow Domain Users to connect via RDP and give them local admin rights
          Add-LocalGroupMember -Group "Administrators" -Member "Domain Users@${ad_domain_name}"

          "Domain joined" | Out-File -FilePath C:\domain_join_log.txt
          
          exit 3010 # Reboot instance, see https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch-v2-settings.html#ec2launch-v2-exit-codes-reboots
        }
