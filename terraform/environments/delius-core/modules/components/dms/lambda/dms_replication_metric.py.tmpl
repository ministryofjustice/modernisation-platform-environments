import boto3
import json
import logging
import re
from datetime import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):

    # The following guide describes Instance Scheduling - 
    #    automatically stop non-production instances overnight
    # https://user-guide.modernisation-platform.service.justice.gov.uk/concepts/environments/instance-scheduling.html#instance-scheduling-automatically-stop-non-production-instances-overnight
    # 
    # We should ignore DMS events sent when the primary database instance is not meant
    # to be up.   That is under the following conditions:
    # Before 6am or after 9pm, or all day weekends
    # Except if the instance scheduling is set to "skip-scheduling" or "skip-auto-stop"
    # as we do not automatically stop those instances.
    # The instance scheduling for the environment is embedded into this function at
    # creation time using the value of the delius primary database instance_scheduling tag;
    # this avoids having to find and read the tag each time the function gets called as
    # this instance_scheduling tag is unlikely to change very often if at all.
    #
    # If we ignore DMS events out of hours then that avoids changing the status of the
    # CloudWatch alarm.  This is important because a DMS event is raised when replication
    # fails overnight (due to the database instance being down), but *NO* DMS event is
    # raised when the replication starts working again (due to the database instance
    # being restarted).  Therefore we must avoid processing the overnight failure events.

    cloudwatch = boto3.client('cloudwatch')
    for record in event['Records']:

        # Get the current local time and weekday (timezones are respected)
        now = datetime.now()
        current_hour    = now.hour
        current_minute  = now.minute
        current_weekday = now.weekday()  # Monday is 0, Sunday is 6

        # Skip the iteration if before 6am, after 9pm, or it is the weekend.
        # These times are hard-coded into the stop/start functionality.  We do not
        # currently support custom times.
        # Note - we do not enable monitoring until 6:10am as this allows 10 minutes
        # for the databases to restart in the morning; otherwise we will get false
        # alarms since DMS will not be able to connect immediately after 6am.
        # Do NOT skip if the instance_scheduling tag has the value of skip-scheduling 
        # or skip-audit-stop is set as we must handle all DMS events in these environments (they are up 24/7)
        if (current_hour < 6 or (current_hour == 6 and current_minute <= 10) or current_hour >= 21 or current_weekday >= 5) and (not "${oracle_db_instance_scheduling}" in ["skip-scheduling","skip-auto-stop"]):
            continue

        message = json.loads(record['Sns']['Message'])
        logger.info("SNS Message: %s",message)

        event_message = message.get("Event Message")
        event_source  = message.get("Event Source")
        source_id     = message.get("SourceId")

        dms_event_id  = re.search(r"#(DMS-EVENT-\d+) $",message.get("Event ID"))

        # DMS Event IDs are documented at https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html
        #
        # Those relevant for this metric are:
        #
        # Running Replication:
        #  DMS-EVENT-0069: The replication task has started.
        #  DMS-EVENT-0081: A reload of table details has been requested.
        #  DMS-EVENT-0093: Reading resumed.
        running_replication = ["DMS-EVENT-0069","DMS-EVENT-0081","DMS-EVENT-0093"]
        #
        # Stopped Replication:
        #  DMS-EVENT-0079: The replication task has stopped.
        #  DMS-EVENT-0091: Reading paused, swap files limit reached.
        #  DMS-EVENT-0092: Reading paused, disk usage limit reached.
        #  DMS-EVENT-0078: A replication task has failed.
        stopped_replication = ["DMS-EVENT-0079","DMS-EVENT-0091","DMS-EVENT-0092","DMS-EVENT-0078"]

        if dms_event_id.group(1) in running_replication:
            logger.info("TASK START: " + event_source + " task " + source_id + " started")
            cloudwatch.put_metric_data(
                Namespace='CustomDMSMetrics',
                MetricData=[
                    {
                        'MetricName': 'DMSReplicationStopped',
                        'Dimensions': [
                            {'Name': 'SourceId',    'Value': source_id}
                        ],
                        'Value': 0,  # Reset Below Trigger threshold (Task Started)
                        'Unit': 'Count'
                    }
                ]
            )
        elif dms_event_id.group(1) in stopped_replication:
            logger.info("TASK STOPPED: " + event_source + " task " + source_id + " stopped")
            cloudwatch.put_metric_data(
                Namespace='CustomDMSMetrics',
                MetricData=[
                    {
                        'MetricName': 'DMSReplicationStopped',
                        'Dimensions': [
                            {'Name': 'SourceId',    'Value': source_id}
                        ],
                        'Value': 1,  # Trigger threshold (Task Failed)
                        'Unit': 'Count'
                    }
                ]
            )