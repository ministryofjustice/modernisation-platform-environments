locals {

  ec2_instances = {

    bip = {
      cloudwatch_metric_alarms = local.cloudwatch_metric_alarms.bip
      config = {
        ami_name                  = "oasys_bip_release_2023-12-02*"
        iam_resource_names_prefix = "ec2"
        instance_profile_policies = [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "EC2Default",
          "EC2S3BucketWriteAndDeleteAccessPolicy",
          "ImageBuilderS3BucketWriteAndDeleteAccessPolicy"
        ]
        subnet_name = "private"
      }
      instance = {
        disable_api_termination = false
        instance_type           = "t3.xlarge"
        key_name                = "ec2-user"
        vpc_security_group_ids  = ["bip"]
        tags = {
          backup-plan = "daily-and-weekly"
        }
      }
      user_data_cloud_init = {
        args = {
          branch       = "main"
          ansible_args = ""
        }
        scripts = [ # paths are relative to templates/ dir
          "../../../modules/baseline_presets/ec2-user-data/install-ssm-agent.sh",
          "../../../modules/baseline_presets/ec2-user-data/ansible-ec2provision.sh.tftpl",
          "../../../modules/baseline_presets/ec2-user-data/post-ec2provision.sh",
        ]
      }
      tags = {
        backup           = "false" # opt out of mod platform default backup plan
        description      = "${local.environment} oasys bip"
        os-major-version = 7
        os-type          = "Linux"
        os-version       = "RHEL 7.9"
        server-type      = "oasys-bip"
        update-ssm-agent = "patchgroup1"
      }
    }

    db11g = {
      cloudwatch_metric_alarms = merge(
        local.cloudwatch_metric_alarms.db,
        local.cloudwatch_metric_alarms.db_backup
      )
      config = {
        # Uses base ami as Nomis DB ami not available in oasys env. 
        ami_name                  = "base_rhel_7_9_2024-01-01T00-00-06.493Z"
        iam_resource_names_prefix = "ec2-database"
        instance_profile_policies = [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "EC2Db",
          "EC2S3BucketWriteAndDeleteAccessPolicy",
          "ImageBuilderS3BucketWriteAndDeleteAccessPolicy"
        ]
        secretsmanager_secrets_prefix = "ec2/"
        subnet_name                   = "data"
      }
      instance = {
        disable_api_termination      = false
        instance_type                = "r6i.4xlarge"
        key_name                     = "ec2-user"
        metadata_options_http_tokens = "optional" # the Oracle installer cannot accommodate a token
        vpc_security_group_ids       = ["data"]
        tags = {
          backup-plan = "daily-and-weekly"
        }
      }
      route53_records = {
        create_internal_record = true
        create_external_record = true
      }
      secretsmanager_secrets = {
        asm-passwords = {
          description             = "Oracle ASM passwords generated by oracle-11g ansible role"
          recovery_window_in_days = 0 # so instances can be deleted and re-created without issue
        }
      }
      user_data_cloud_init = {
        args = {
          branch       = "main"
          ansible_args = "" # built from base AMI to amibuild and ec2provision tasks are run
        }
        scripts = [ # paths are relative to templates/ dir
          "../../../modules/baseline_presets/ec2-user-data/install-ssm-agent.sh",
          "../../../modules/baseline_presets/ec2-user-data/ansible-ec2provision.sh.tftpl",
          "../../../modules/baseline_presets/ec2-user-data/post-ec2provision.sh",
        ]
      }
      tags = {
        backup               = "false" # opt out of mod platform default backup plan
        description          = "${local.environment} onr database"
        licence-requirements = "Oracle Database"
        os-type              = "Linux"
        os-major-version     = 8
        os-version           = "RHEL 8.5"
        server-type          = "onr-db"
        update-ssm-agent     = "patchgroup1"
      }
    }

    db19c = {
      cloudwatch_metric_alarms = merge(
        local.cloudwatch_metric_alarms.db,
        local.cloudwatch_metric_alarms.db_backup
      )
      config = {
        ami_name                  = "oasys_oracle_db_release_2023-06-26T10-16-03.670Z"
        ami_owner                 = "self"
        iam_resource_names_prefix = "ec2-database"
        instance_profile_policies = [
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "EC2Db",
          "EC2S3BucketWriteAndDeleteAccessPolicy",
          "ImageBuilderS3BucketWriteAndDeleteAccessPolicy"
        ]
        secretsmanager_secrets_prefix = "ec2/"
        subnet_name                   = "data"
      }
      instance = {
        disable_api_termination      = false
        instance_type                = "r6i.4xlarge"
        key_name                     = "ec2-user"
        metadata_options_http_tokens = "optional" # the Oracle installer cannot accommodate a token
        vpc_security_group_ids       = ["data"]
        tags = {
          backup-plan = "daily-and-weekly"
        }
      }
      user_data_cloud_init = {
        args = {
          branch       = "main"
          ansible_args = ""
        }
        scripts = [ # paths are relative to templates/ dir
          "../../../modules/baseline_presets/ec2-user-data/install-ssm-agent.sh",
          "../../../modules/baseline_presets/ec2-user-data/ansible-ec2provision.sh.tftpl",
          "../../../modules/baseline_presets/ec2-user-data/post-ec2provision.sh",
        ]
      }
      route53_records = {
        create_internal_record = true
        create_external_record = true
      }
      secretsmanager_secrets = {
        asm-passwords = {
          description             = "Oracle ASM passwords generated by oracle-19c ansible role"
          recovery_window_in_days = 0 # so instances can be deleted and re-created without issue
        }
      }
      tags = {
        backup               = "false" # opt out of mod platform default backup plan
        component            = "data"
        description          = "${local.environment} oasys database"
        licence-requirements = "Oracle Database"
        os-type              = "Linux"
        os-major-version     = 8
        os-version           = "RHEL 8.5"
        server-type          = "oasys-db"
        update-ssm-agent     = "patchgroup1"
      }
    }
  }
}
