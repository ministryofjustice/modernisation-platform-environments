---
  name: terraform strategy

  on:
    workflow_call:
      inputs:
        application:
          type: string
          required: true
          description: "Application name for which this strategy matrix pipeline should run."
      outputs:
        matrix:
          description: "Matrix JSON string to feed that can be used as strategy in a separate terraform job"
          value: ${{ jobs.strategy.outputs.matrix }}

  jobs:
    strategy:
      name: "strategy"
      runs-on: ubuntu-latest
      outputs:
        matrix: "${{ steps.strategy.outputs.matrix }}"
      steps:
        - name: Check out Repo
          uses: actions/checkout@v3

        - name: Generate Strategy Matrix
          id: strategy
          run: |
            set -euo pipefail

            echo '{"include":[' > matrix.out

            if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
              # On a branch => plan on all accounts, but plan_apply only on dev/test
              curl -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
                | jq -r '.environments[]' \
                | jq '.name' \
                | jq 'if contains("production") then {"target": ., "action":"plan"} else {"target": ., "action":"plan_apply"} end' -j \
                | sed s"/}{/},{/g" \
                > envlist.json
            else
              # On main => plan_apply on all accounts
              curl -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
                | jq -r '.environments[] | {"target" : .name, "action" : "plan_apply"}' -j \
                | sed s"/}{/},{/g" \
                > envlist.json
            fi
            COMPONENTS=""
            COMPONENTS="$COMPONENTS \"\""

            if [ -d "terraform/environments/${{ inputs.application }}" ]; then
              for d in $(find "terraform/environments/${{ inputs.application }}" -mindepth 1 -maxdepth 1 -type d); do
                # e.g. d="terraform/environments/analytical-platform-compute/network"
                subfolder="$(basename "$d")"

                # We'll skip if there's no "platform_backend.tf" inside that directory.
                if [ ! -f "$d/platform_backend.tf" ]; then
                  continue
                fi

                # If needed, exclude certain known folders
                [ "$subfolder" = ".terraform" ] && continue

                # Add to our COMPONENTS list
                COMPONENTS="$COMPONENTS \"$subfolder\""
              done
            fi

            echo "Discovered components (folders with platform_backend.tf): $COMPONENTS"

            echo -n > final-list.json
            echo "[" > final-list.json

            firstOuter=true
            while IFS= read -r envobj; do
              # envobj might be something like {"target":"development","action":"plan_apply"}

              for c in $COMPONENTS; do
                rawC=$(echo "$c" | sed 's/"//g')   # strip quotes from "network" => network

                if [ "$firstOuter" = true ]; then
                  firstOuter=false
                else
                  echo "," >> final-list.json
                fi

                # Merge { "target":"dev", "action":"..." } + { "component":"subfolder" }
                echo -n "$envobj" | jq --arg comp "$rawC" '. + {"component": $comp}' >> final-list.json
              done
            done < <(echo $(cat envlist.json))

            echo "]" >> final-list.json

            # Wrap in {"include": ... } for GitHub Actions matrix
            echo -n '{"include":' > matrix.out
            cat final-list.json >> matrix.out
            echo -n '}' >> matrix.out


            matrix=$(cat matrix.out | jq -r)
            echo "Matrix is:"
            echo "$matrix"

            # Output the matrix JSON
            echo 'matrix<<EOF' >> $GITHUB_OUTPUT
            echo "${matrix}" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
