---
name: terraform strategy

on:
  workflow_call:
    inputs:
      application:
        type: string
        required: true
        description: "Application name for which this strategy matrix pipeline should run."
    outputs:
      matrix:
        description: "Matrix JSON string to feed that can be used as strategy in a separate terraform job"
        value: ${{ jobs.strategy.outputs.matrix }}

jobs:
  strategy:
    name: "strategy"
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
    steps:
      - name: Check out Repo
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b

      - name: Generate Strategy Matrix
        id: strategy
        run: |
          set -euo pipefail

          # Fetch the main branch so we can compare against it.
          git fetch origin main

          # Determine the commit to use as the tip of the branch.
          # For pull request events (ref starts with "refs/pull/"), use the PR's head commit.
          if [[ "${GITHUB_REF}" == refs/pull/* ]]; then
            head_commit=$(jq --raw-output .pull_request.head.sha "$GITHUB_EVENT_PATH")
          else
            head_commit=HEAD
          fi

          # Fetch environment data from <application>.json.
          if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
            # On a branch: production gets "plan", dev/test get "plan_apply".
            curl -s -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
              | jq -c '.environments[] as $env |
                  if $env.name | contains("production") then
                    {"target": $env.name, "action": "plan"}
                  else
                    {"target": $env.name, "action": "plan_apply"}
                  end' \
              > envlist.json
          else
            # On main: all accounts get "plan_apply".
            curl -s -X GET "https://raw.githubusercontent.com/ministryofjustice/modernisation-platform/main/environments/${{ inputs.application }}.json" \
              | jq -c '.environments[] | {"target": .name, "action": "plan_apply"}' \
              > envlist.json
          fi

          # Discover valid subfolders that contain a platform_backend.tf file and check for changes.
          COMPONENTS="root"
          if [ -d "terraform/environments/${{ inputs.application }}" ]; then
            for d in $(find "terraform/environments/${{ inputs.application }}" -mindepth 1 -maxdepth 1 -type d); do
              subfolder="$(basename "$d" | tr -d '\r\n')"
              if [ -f "$d/platform_backend.tf" ]; then
                [ "$subfolder" = ".terraform" ] && continue
                COMPONENTS="$COMPONENTS $subfolder"
              fi
            done
          fi

          echo "Discovered components (folders with platform_backend.tf): $COMPONENTS"

          # Build the final matrix by looping over environments and components.
          echo "[" > final-list.json
          firstEntry=true

          while IFS= read -r envobj; do
            root_changed=false
            component_changed=false

            for comp in $COMPONENTS; do
              folder="terraform/environments/${{ inputs.application }}"
              if [ "$comp" != "root" ]; then
                folder="$folder/$comp"
              fi

              # Check for changes in the folder.
              if [[ "${GITHUB_REF}" != "refs/heads/main" ]]; then
                merge_base=$(git merge-base origin/main "$head_commit")
                if git diff --quiet "$merge_base" "$head_commit" -- "$folder"; then
                  echo "Skipping '$comp' as no changes detected in '$folder' (branch compared to merge base)"
                  continue
                fi
              else
                if git diff --quiet HEAD~1 HEAD -- "$folder"; then
                  echo "Skipping '$comp' as no changes detected in '$folder' (main branch)"
                  continue
                fi
              fi

              # If changes are detected, mark the appropriate flag.
              if [ "$comp" == "root" ]; then
                root_changed=true
              else
                component_changed=true
              fi

              # If changes are detected, add an entry to the matrix.
              if [ "$comp" != "root" ]; then
                if [ "$firstEntry" = true ]; then
                  firstEntry=false
                else
                  echo "," >> final-list.json
                fi
                echo -n "$envobj" | jq --arg comp "$comp" '. + {"component": $comp}' >> final-list.json
              fi
            done

            # If root has changes but no components, add root to the matrix.
            if $root_changed && ! $component_changed; then
              if [ "$firstEntry" = true ]; then
                firstEntry=false
              else
                echo "," >> final-list.json
              fi
              echo -n "$envobj" | jq --arg comp "root" '. + {"component": $comp}' >> final-list.json
            fi

          done < envlist.json || true

          echo "]" >> final-list.json

          # Wrap the JSON array in {"include": [...] } for the GitHub Actions matrix.
          echo -n '{"include":' > matrix.out
          cat final-list.json >> matrix.out
          echo '}' >> matrix.out

          matrix=$(cat matrix.out | jq -r)
          echo "Matrix is:"
          echo "$matrix"

          # Output the matrix for subsequent jobs.
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
