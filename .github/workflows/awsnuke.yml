---
name: awsnuke
on:
  push:
    branches:
      - 'feature/refactor-nuke'
  # schedule:
  #   # * is a special character in YAML so you have to quote this string
  #   # trigger every sunday at 12:00am
  #   - cron: '0 12 * * 0'
  workflow_dispatch:
env:
  AWS_REGION: "eu-west-2"
  ENVIRONMENT_MANAGEMENT: ${{ secrets.MODERNISATION_PLATFORM_ENVIRONMENTS }}
  # NUKE_DO_NOT_RECREATE_ENVIRONMENTS: performance-hub-development,example-development,testing-test-development,
  TF_IN_AUTOMATION: true
  NUKE_ACCOUNTS: ${{ secrets.MODERNISATION_PLATFORM_AUTONUKE }}
  NUKE_BLOCKLIST_ACCOUNTS: ${{ secrets.MODERNISATION_PLATFORM_AUTONUKE_BLOCKLIST }}
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
defaults:
  run:
    shell: bash

jobs:
  setup-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      account_blocklist_str : ${{ steps.set-blocklist-string.outputs.account_blocklist_str }}
    steps:
      - id: set-matrix
        run: echo "matrix=$(jq -c '.| map(select(. !="testing-test"))|sort' <<< $NUKE_ACCOUNTS)" >> $GITHUB_OUTPUT
      - id: set-blocklist-string
        run: |
          account_blocklist_str=''
          while read -r account_alias _; do
          account_number=$(jq -r -e --arg account_name "$account_alias" '.account_ids[$account_name]' <<< $ENVIRONMENT_MANAGEMENT)
          account_blocklist_str+="  - \"${account_number}\" # ${account_alias}"
          account_blocklist_str+=$'\n'
          done <<< "$(jq -c -r '.[]' <<< $NUKE_BLOCKLIST_ACCOUNTS)" # Taking this approach as piping (|) to a read opens a subshell and passes the variables to it by value
          # Passing multi-line string output:
          echo "account_blocklist_str<<EOF" >> $GITHUB_OUTPUT
          echo "$account_blocklist_str" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
  nuke:
    strategy:
      fail-fast: false
      matrix:
        nuke_accts: ${{ fromJSON(needs.setup-prerequisites.outputs.matrix) }}
        # nuke_accts: [cooker-development,sprinkler-development]
    name: Redeploy after nuke
    runs-on: ubuntu-latest
    needs: setup-prerequisites
    steps:
      - name: Checkout Repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
      # - name: Configure Blocklist
      #   run: |
      #     account_blocklist_str=''
      #     while read -r account_alias _; do
      #     account_blocklist_str+="  - \"${account_alias}\" # ${account_alias}"
      #     account_blocklist_str+=$'\n'
      #     done <<< "$(jq -c -r '.[]' <<< $NUKE_BLOCKLIST_ACCOUNTS)" # Taking this approach as piping (|) to a read opens a subshell and passes the variables to it by value
      #     echo "Account string: ${account_blocklist_str}"
      #     echo "BLOCKLIST<<EOF" >> $GITHUB_ENV
      #     echo "$account_blocklist_str" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV
      - name: Set Account Number
        run: echo "ACCOUNT_NUMBER=$(jq -r -e --arg account_name "${ACCOUNT_NAME}" '.account_ids[$account_name]' <<< $ENVIRONMENT_MANAGEMENT)" >> $GITHUB_ENV
      - name: Setup matrix
        run: jq '.' <<< $NUKE_ACCOUNTS
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1.7.0
        if: ${{ env.ACCOUNT_ENV}} != "nonmember"
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_NUMBER }}:role/github-actions"
          role-session-name: githubactionsrolesession
          aws-region: ${{ env.AWS_REGION }}
      # - name: Load and Configure Terraform
      #   uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
      #   with:
      #     terraform_version: "~1"
      #     terraform_wrapper: false
      # - name: Apply after nuke - ${{ matrix.nuke_accts }}
      #   run: |
      #     terraform --version
      #     echo "Terraform apply - ${ACCOUNT_NAME}"
      #     bash scripts/terraform-init.sh terraform/environments/$ACCOUNT_NAME
      #     terraform -chdir="terraform/environments/${ACCOUNT_NAME}" workspace select "${ACCOUNT_NAME}-development"
      #     bash scripts/terraform-apply.sh terraform/environments/$ACCOUNT_NAME
      - name: debug
        run: echo "${ACCOUNT_NAME}"
      - name: debug-blocklist-env
        run: echo "${{ env.BLOCKLIST }}"
      - name: debug-blockist-output
        run: echo "${{ needs.setup-prerequisites.outputs.account_blocklist_str }}"
    env:
      ACCOUNT_NAME: ${{ matrix.nuke_accts }}
